// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"embed"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/kobbi/vbciapi/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CallCenter() CallCenterResolver
	Church() ChurchResolver
	ChurchMinistryRole() ChurchMinistryRoleResolver
	EmergencyContact() EmergencyContactResolver
	FamilyInfo() FamilyInfoResolver
	Finance() FinanceResolver
	JobInfo() JobInfoResolver
	Member() MemberResolver
	MemberChildren() MemberChildrenResolver
	MemberChurchMinistryRole() MemberChurchMinistryRoleResolver
	MigrationRequest() MigrationRequestResolver
	Mutation() MutationResolver
	Query() QueryResolver
	Registration() RegistrationResolver
	RegistrationByCallAgent() RegistrationByCallAgentResolver
	SubChurch() SubChurchResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CallCenter struct {
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Password    func(childComplexity int) int
		SubChurches func(childComplexity int) int
		Token       func(childComplexity int) int
		Types       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Church struct {
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Password    func(childComplexity int) int
		SubChurches func(childComplexity int) int
		Token       func(childComplexity int) int
		Types       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	ChurchMinistryRole struct {
		ID   func(childComplexity int) int
		Role func(childComplexity int) int
	}

	DateInfo struct {
		Month       func(childComplexity int) int
		WeekOfMonth func(childComplexity int) int
	}

	EmergencyContact struct {
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		Relation    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	FamilyInfo struct {
		Children                 func(childComplexity int) int
		CreatedAt                func(childComplexity int) int
		DateOfBirth              func(childComplexity int) int
		Education                func(childComplexity int) int
		EmergencyContact         func(childComplexity int) int
		EmergencyContactID       func(childComplexity int) int
		ID                       func(childComplexity int) int
		LastName                 func(childComplexity int) int
		Member                   func(childComplexity int) int
		MemberID                 func(childComplexity int) int
		NextOfKin                func(childComplexity int) int
		Occupation               func(childComplexity int) int
		OccupationID             func(childComplexity int) int
		Relationship             func(childComplexity int) int
		Spouse                   func(childComplexity int) int
		SpouseID                 func(childComplexity int) int
		SpouseNameNotVbci        func(childComplexity int) int
		SpousePhoneNumberNotVbci func(childComplexity int) int
		UpdatedAt                func(childComplexity int) int
	}

	Finance struct {
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Password    func(childComplexity int) int
		SubChurches func(childComplexity int) int
		Token       func(childComplexity int) int
		Types       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	JobInfo struct {
		Company        func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		ID             func(childComplexity int) int
		Position       func(childComplexity int) int
		TypeOfWork     func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
		WorkExperience func(childComplexity int) int
	}

	LeaderRegistrationsDistribution struct {
		LeaderID        func(childComplexity int) int
		RegistrationIDs func(childComplexity int) int
	}

	Member struct {
		ChurchMinistries func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Day              func(childComplexity int) int
		Email            func(childComplexity int) int
		ID               func(childComplexity int) int
		Leader           func(childComplexity int) int
		LeaderID         func(childComplexity int) int
		Location         func(childComplexity int) int
		Name             func(childComplexity int) int
		Password         func(childComplexity int) int
		PersonalInfor    func(childComplexity int) int
		PersonalInforID  func(childComplexity int) int
		PhoneNumber      func(childComplexity int) int
		Pwood            func(childComplexity int) int
		ReferenceIDCount func(childComplexity int) int
		Registrations    func(childComplexity int) int
		SubChurch        func(childComplexity int) int
		SubChurchID      func(childComplexity int) int
		Token            func(childComplexity int) int
		Types            func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	MemberChildren struct {
		ChildrenID func(childComplexity int) int
		ID         func(childComplexity int) int
		ParentID   func(childComplexity int) int
	}

	MemberChurchMinistryRole struct {
		ChurchMinistryRole   func(childComplexity int) int
		ChurchMinistryRoleID func(childComplexity int) int
		ID                   func(childComplexity int) int
		MemberID             func(childComplexity int) int
	}

	MigrationRequest struct {
		CreatedAt           func(childComplexity int) int
		DestinationChurchID func(childComplexity int) int
		ID                  func(childComplexity int) int
		LocationEnd         func(childComplexity int) int
		LocationFrom        func(childComplexity int) int
		MemberID            func(childComplexity int) int
		MemberName          func(childComplexity int) int
		Status              func(childComplexity int) int
		StatusID            func(childComplexity int) int
	}

	Mutation struct {
		AddAnotherType                            func(childComplexity int, memberID string, types *string) int
		ApproveSubChurchMigration                 func(childComplexity int, requestID string) int
		AssignLeader                              func(childComplexity int, input *model.AssignLeaderInput) int
		AssignLeaderMemberRegisterToAnotherLeader func(childComplexity int, sendToLeaderID string, sendFromLeaderID string) int
		AssignMemberToLeaderbySubchurch           func(childComplexity int, leaderID string, memberID string) int
		AssignSubLeaderToMemberRegistration       func(childComplexity int, callAgentID string, day []string) int
		AssignSubLeaderToMemberRegistrationArray  func(childComplexity int, input []*model.AssignSubLeaderToMemberRegistrationArrayInput) int
		CleanUpPhoneNumbers                       func(childComplexity int) int
		CreateCallCenterForSubChurchs             func(childComplexity int, name string, subChurchIDs []string) int
		CreateChurch                              func(childComplexity int, name string, email string, password *string) int
		CreateMember                              func(childComplexity int, input *model.CreateMemberInput) int
		CreateMemberBysubLeader                   func(childComplexity int, input *model.CreateMemberInputBySub) int
		CreateMemberbySubchurch                   func(childComplexity int, input *model.CreateMemberInput) int
		CreateMianChurch                          func(childComplexity int, subChurchName *string) int
		CreateRegistration                        func(childComplexity int, memberID string, input model.CreateRegistrationInput) int
		CreateRegistrationArray                   func(childComplexity int, input []*model.RegistrationArrayInput) int
		CreateSubChurch                           func(childComplexity int, subChurchName *string, branch bool, isLocal *bool) int
		CreateSubChurchesWithMainChurch           func(childComplexity int, mainChurchID string, subChurchNames []string) int
		DataMembers                               func(childComplexity int) int
		DeleteAllMembersBySubChurch               func(childComplexity int, subChurchID string) int
		DeleteAssignSubLeaderToMemberRegistration func(childComplexity int) int
		DeleteChurch                              func(childComplexity int, mainChurchID string) int
		DeleteMember                              func(childComplexity int, memberID string) int
		DeleteRegistration                        func(childComplexity int, registrationID string) int
		DeleteSubChurch                           func(childComplexity int, subChurchID string) int
		DistributeRegistrationsToLeaders          func(childComplexity int, leaderIds []string) int
		ImportMemberData                          func(childComplexity int, file graphql.Upload, churchID *string) int
		LogOut                                    func(childComplexity int) int
		Login                                     func(childComplexity int, input model.LoginLeaderInput) int
		Memberlogin                               func(childComplexity int, input model.LoginLeaderInput) int
		RejectSubChurchMigration                  func(childComplexity int, requestID string) int
		RemoveLeader                              func(childComplexity int, memberID string) int
		ReportRegistrationByLeader                func(childComplexity int, report *model.ReportRegistrationInput, registrationID string, leaderID string) int
		RequestSubChurchMigration                 func(childComplexity int, input model.SubChurchMigrationInput) int
		TempLeadercreateRegistrationArray         func(childComplexity int, input []*model.CreateRegistrationInput, registrationID []*string) int
		UpdateCallCenter                          func(childComplexity int, input model.UpdateLeaderProfileInput, callCenterID string) int
		UpdateLeader                              func(childComplexity int, input model.UpdateLeaderProfileInput, memberID string) int
		UpdateLeaderTypes                         func(childComplexity int, id *string, tags []string) int
		UpdateMember                              func(childComplexity int, input model.UpdateMemberInput, memberID string) int
		UpdateMemberEmergencyContact              func(childComplexity int, input model.EmergencyContactInput, memberID string) int
		UpdateMemberFamilyInfo                    func(childComplexity int, input model.UpdateMemberFamilyInfoInput, memberID string) int
		UpdateMemberJobInfoInput                  func(childComplexity int, input model.JobInfoInput, memberID string) int
		UpdateMinistryRoleByLeader                func(childComplexity int, input model.ChurchMinistryRoleInpt, memberID string) int
		UpdateRegistration                        func(childComplexity int, input model.CreateRegistrationInput, registrationID string) int
		UpdateRegistrationArray                   func(childComplexity int, input []*model.RegistrationArrayInputs) int
		UpdateRegistrationByLeader                func(childComplexity int, input model.CreateRegistrationInput, registrationID string, leaderID string) int
		UpdatesubChurch                           func(childComplexity int, input model.UpdateLeaderProfileInput, subChurchID string) int
	}

	Query struct {
		CallRoom                                          func(childComplexity int, subChurchID string) int
		CurrentWeekRegistrations                          func(childComplexity int) int
		CurrentWeekRegistrationsforCallCenter             func(childComplexity int) int
		CurrentWeekRegistrationsforsub                    func(childComplexity int, subChurchID string) int
		GetAllDaysFormassignCallAgentToMemberRegistration func(childComplexity int) int
		GetAllMainChurch                                  func(childComplexity int) int
		GetAllMemberBySubLeaderToLeader                   func(childComplexity int, subChurchID string, day string) int
		GetAllMembersByLeader                             func(childComplexity int, leaderID string) int
		GetAllMembersBySubChurchID                        func(childComplexity int, subChurchID string) int
		GetAllMembersBySubChurchIDForCallAgent            func(childComplexity int, subChurchID string) int
		GetAllRegistersByMemberID                         func(childComplexity int, memberID string) int
		GetAllRegistersByTempLeader                       func(childComplexity int, tempLeaderID string) int
		GetAllSubChurchByCallCenter                       func(childComplexity int, callCenterID string) int
		GetAllSubChurchLeader                             func(childComplexity int, subChurchID string) int
		GetAllSubLeaderByLeader                           func(childComplexity int, subChurchID string, day string) int
		GetAllmembersByDaysForCallAgent                   func(childComplexity int, callAgentID string) int
		GetAllsubChurch                                   func(childComplexity int) int
		GetAllsubChurchByMainChurchID                     func(childComplexity int, mainChurchID string) int
		GetAllsubChurchByMemberID                         func(childComplexity int, memberID string) int
		GetCallAgent                                      func(childComplexity int) int
		GetCallCenter                                     func(childComplexity int) int
		GetCaller                                         func(childComplexity int) int
		GetMigration                                      func(childComplexity int, id string) int
		GetMigrationdestinationID                         func(childComplexity int, destinationChurchID string) int
		GetNoteficationByLeader                           func(childComplexity int, subChurchID string, day *string) int
		Getmember                                         func(childComplexity int, id string) int
		Getmembers                                        func(childComplexity int) int
		GetsubChurchByID                                  func(childComplexity int, id string) int
		LastFourCommentsForMember                         func(childComplexity int, memberID string) int
		MembersBySubChurchID                              func(childComplexity int, subChurchID string) int
		RegistrationsByLeader                             func(childComplexity int, mleaderID string) int
		TodaysMembers                                     func(childComplexity int) int
		WeekRegistrationsforSub                           func(childComplexity int) int
	}

	Registration struct {
		Absence      func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Done         func(childComplexity int) int
		ID           func(childComplexity int) int
		LastComment  func(childComplexity int) int
		Leader       func(childComplexity int) int
		LeaderID     func(childComplexity int) int
		LeaderName   func(childComplexity int) int
		Member       func(childComplexity int) int
		MemberID     func(childComplexity int) int
		MemberName   func(childComplexity int) int
		Present      func(childComplexity int) int
		Report       func(childComplexity int) int
		SubChurch    func(childComplexity int) int
		SubChurchID  func(childComplexity int) int
		TempLeaderID func(childComplexity int) int
	}

	RegistrationByCallAgent struct {
		CallAgent   func(childComplexity int) int
		CallAgentID func(childComplexity int) int
		Day         func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	RegistrationsDistribution struct {
		LeaderID        func(childComplexity int) int
		RegistrationIDs func(childComplexity int) int
	}

	SubChurch struct {
		CallCenter   func(childComplexity int) int
		CallCenterID func(childComplexity int) int
		Church       func(childComplexity int) int
		ChurchID     func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Email        func(childComplexity int) int
		ID           func(childComplexity int) int
		IsLocal      func(childComplexity int) int
		Leaders      func(childComplexity int) int
		Members      func(childComplexity int) int
		Name         func(childComplexity int) int
		Password     func(childComplexity int) int
		Token        func(childComplexity int) int
		Types        func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	WeeklyResults struct {
		Date          func(childComplexity int) int
		Registrations func(childComplexity int) int
	}
}

type CallCenterResolver interface {
	ID(ctx context.Context, obj *model.CallCenter) (string, error)
}
type ChurchResolver interface {
	ID(ctx context.Context, obj *model.Church) (string, error)
}
type ChurchMinistryRoleResolver interface {
	ID(ctx context.Context, obj *model.ChurchMinistryRole) (string, error)
}
type EmergencyContactResolver interface {
	ID(ctx context.Context, obj *model.EmergencyContact) (string, error)
}
type FamilyInfoResolver interface {
	ID(ctx context.Context, obj *model.FamilyInfo) (string, error)
}
type FinanceResolver interface {
	ID(ctx context.Context, obj *model.Finance) (string, error)
}
type JobInfoResolver interface {
	ID(ctx context.Context, obj *model.JobInfo) (string, error)
}
type MemberResolver interface {
	ID(ctx context.Context, obj *model.Member) (string, error)

	Types(ctx context.Context, obj *model.Member) ([]string, error)
}
type MemberChildrenResolver interface {
	ID(ctx context.Context, obj *model.MemberChildren) (string, error)
}
type MemberChurchMinistryRoleResolver interface {
	ID(ctx context.Context, obj *model.MemberChurchMinistryRole) (string, error)
}
type MigrationRequestResolver interface {
	ID(ctx context.Context, obj *model.MigrationRequest) (string, error)
}
type MutationResolver interface {
	RequestSubChurchMigration(ctx context.Context, input model.SubChurchMigrationInput) (*model.MigrationRequest, error)
	ApproveSubChurchMigration(ctx context.Context, requestID string) (*model.MigrationRequest, error)
	RejectSubChurchMigration(ctx context.Context, requestID string) (*model.MigrationRequest, error)
	CreateMember(ctx context.Context, input *model.CreateMemberInput) (*model.Member, error)
	CreateMemberbySubchurch(ctx context.Context, input *model.CreateMemberInput) (*model.Member, error)
	ImportMemberData(ctx context.Context, file graphql.Upload, churchID *string) ([]*model.Member, error)
	DataMembers(ctx context.Context) (*string, error)
	CleanUpPhoneNumbers(ctx context.Context) ([]*string, error)
	CreateMemberBysubLeader(ctx context.Context, input *model.CreateMemberInputBySub) (*model.Member, error)
	UpdateMember(ctx context.Context, input model.UpdateMemberInput, memberID string) (*model.Member, error)
	UpdateMemberFamilyInfo(ctx context.Context, input model.UpdateMemberFamilyInfoInput, memberID string) (*model.FamilyInfo, error)
	UpdateMemberEmergencyContact(ctx context.Context, input model.EmergencyContactInput, memberID string) (*model.EmergencyContact, error)
	UpdateMemberJobInfoInput(ctx context.Context, input model.JobInfoInput, memberID string) (*model.JobInfo, error)
	UpdateMinistryRoleByLeader(ctx context.Context, input model.ChurchMinistryRoleInpt, memberID string) (*model.MemberChurchMinistryRole, error)
	UpdateLeader(ctx context.Context, input model.UpdateLeaderProfileInput, memberID string) (*model.Member, error)
	UpdatesubChurch(ctx context.Context, input model.UpdateLeaderProfileInput, subChurchID string) (*model.SubChurch, error)
	UpdateCallCenter(ctx context.Context, input model.UpdateLeaderProfileInput, callCenterID string) (*model.CallCenter, error)
	CreateChurch(ctx context.Context, name string, email string, password *string) (*model.Church, error)
	DeleteChurch(ctx context.Context, mainChurchID string) (bool, error)
	DeleteMember(ctx context.Context, memberID string) (bool, error)
	DeleteSubChurch(ctx context.Context, subChurchID string) (bool, error)
	DeleteAllMembersBySubChurch(ctx context.Context, subChurchID string) (bool, error)
	DeleteRegistration(ctx context.Context, registrationID string) (bool, error)
	CreateSubChurch(ctx context.Context, subChurchName *string, branch bool, isLocal *bool) (*model.Church, error)
	CreateMianChurch(ctx context.Context, subChurchName *string) (*model.Church, error)
	AssignLeader(ctx context.Context, input *model.AssignLeaderInput) (*model.Member, error)
	AddAnotherType(ctx context.Context, memberID string, types *string) (*model.Member, error)
	UpdateLeaderTypes(ctx context.Context, id *string, tags []string) (*model.Member, error)
	AssignMemberToLeaderbySubchurch(ctx context.Context, leaderID string, memberID string) (*model.Member, error)
	AssignLeaderMemberRegisterToAnotherLeader(ctx context.Context, sendToLeaderID string, sendFromLeaderID string) ([]*model.Registration, error)
	AssignSubLeaderToMemberRegistration(ctx context.Context, callAgentID string, day []string) ([]*model.RegistrationByCallAgent, error)
	AssignSubLeaderToMemberRegistrationArray(ctx context.Context, input []*model.AssignSubLeaderToMemberRegistrationArrayInput) ([]*model.RegistrationByCallAgent, error)
	DeleteAssignSubLeaderToMemberRegistration(ctx context.Context) (bool, error)
	TempLeadercreateRegistrationArray(ctx context.Context, input []*model.CreateRegistrationInput, registrationID []*string) ([]*model.Registration, error)
	UpdateRegistrationArray(ctx context.Context, input []*model.RegistrationArrayInputs) ([]*model.Registration, error)
	RemoveLeader(ctx context.Context, memberID string) (*model.Member, error)
	CreateSubChurchesWithMainChurch(ctx context.Context, mainChurchID string, subChurchNames []string) (*model.Church, error)
	CreateRegistration(ctx context.Context, memberID string, input model.CreateRegistrationInput) (*model.Registration, error)
	CreateRegistrationArray(ctx context.Context, input []*model.RegistrationArrayInput) ([]*model.Registration, error)
	UpdateRegistration(ctx context.Context, input model.CreateRegistrationInput, registrationID string) (*model.Registration, error)
	UpdateRegistrationByLeader(ctx context.Context, input model.CreateRegistrationInput, registrationID string, leaderID string) (*model.Registration, error)
	CreateCallCenterForSubChurchs(ctx context.Context, name string, subChurchIDs []string) (*model.CallCenter, error)
	DistributeRegistrationsToLeaders(ctx context.Context, leaderIds []string) ([]*model.LeaderRegistrationsDistribution, error)
	ReportRegistrationByLeader(ctx context.Context, report *model.ReportRegistrationInput, registrationID string, leaderID string) (*model.Registration, error)
	Login(ctx context.Context, input model.LoginLeaderInput) (model.Returns, error)
	Memberlogin(ctx context.Context, input model.LoginLeaderInput) (model.Returns, error)
	LogOut(ctx context.Context) (bool, error)
}
type QueryResolver interface {
	GetAllMainChurch(ctx context.Context) ([]*model.Church, error)
	GetAllsubChurchByMainChurchID(ctx context.Context, mainChurchID string) ([]*model.SubChurch, error)
	GetAllsubChurchByMemberID(ctx context.Context, memberID string) ([]*model.SubChurch, error)
	GetAllMembersBySubChurchID(ctx context.Context, subChurchID string) ([]*model.Member, error)
	GetAllMembersBySubChurchIDForCallAgent(ctx context.Context, subChurchID string) ([]*model.Member, error)
	GetAllSubChurchLeader(ctx context.Context, subChurchID string) (*model.Member, error)
	GetAllMembersByLeader(ctx context.Context, leaderID string) ([]*model.Member, error)
	GetAllSubLeaderByLeader(ctx context.Context, subChurchID string, day string) ([]*model.Member, error)
	GetAllMemberBySubLeaderToLeader(ctx context.Context, subChurchID string, day string) ([]*model.Member, error)
	GetNoteficationByLeader(ctx context.Context, subChurchID string, day *string) ([]*model.Member, error)
	GetAllRegistersByMemberID(ctx context.Context, memberID string) ([]*model.Registration, error)
	GetAllmembersByDaysForCallAgent(ctx context.Context, callAgentID string) ([]*model.Member, error)
	GetAllDaysFormassignCallAgentToMemberRegistration(ctx context.Context) ([]string, error)
	LastFourCommentsForMember(ctx context.Context, memberID string) ([]*string, error)
	GetAllsubChurch(ctx context.Context) ([]*model.SubChurch, error)
	GetCallCenter(ctx context.Context) ([]*model.CallCenter, error)
	GetAllSubChurchByCallCenter(ctx context.Context, callCenterID string) ([]*model.SubChurch, error)
	GetCaller(ctx context.Context) ([]*model.Member, error)
	GetCallAgent(ctx context.Context) ([]*model.Member, error)
	Getmember(ctx context.Context, id string) (*model.Member, error)
	GetMigration(ctx context.Context, id string) (*model.MigrationRequest, error)
	GetMigrationdestinationID(ctx context.Context, destinationChurchID string) ([]*model.MigrationRequest, error)
	Getmembers(ctx context.Context) ([]*model.Member, error)
	TodaysMembers(ctx context.Context) ([]*model.Member, error)
	GetsubChurchByID(ctx context.Context, id string) (*model.SubChurch, error)
	MembersBySubChurchID(ctx context.Context, subChurchID string) ([]*model.Member, error)
	RegistrationsByLeader(ctx context.Context, mleaderID string) ([]*model.Registration, error)
	CallRoom(ctx context.Context, subChurchID string) ([]*model.Registration, error)
	GetAllRegistersByTempLeader(ctx context.Context, tempLeaderID string) ([]*model.Registration, error)
	CurrentWeekRegistrations(ctx context.Context) ([]*model.Registration, error)
	CurrentWeekRegistrationsforsub(ctx context.Context, subChurchID string) ([]*model.Registration, error)
	CurrentWeekRegistrationsforCallCenter(ctx context.Context) ([]*model.SubChurch, error)
	WeekRegistrationsforSub(ctx context.Context) ([]*model.Registration, error)
}
type RegistrationResolver interface {
	ID(ctx context.Context, obj *model.Registration) (string, error)
}
type RegistrationByCallAgentResolver interface {
	ID(ctx context.Context, obj *model.RegistrationByCallAgent) (string, error)

	Day(ctx context.Context, obj *model.RegistrationByCallAgent) ([]string, error)
}
type SubChurchResolver interface {
	ID(ctx context.Context, obj *model.SubChurch) (string, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "CallCenter.CreatedAt":
		if e.complexity.CallCenter.CreatedAt == nil {
			break
		}

		return e.complexity.CallCenter.CreatedAt(childComplexity), true

	case "CallCenter.Email":
		if e.complexity.CallCenter.Email == nil {
			break
		}

		return e.complexity.CallCenter.Email(childComplexity), true

	case "CallCenter.ID":
		if e.complexity.CallCenter.ID == nil {
			break
		}

		return e.complexity.CallCenter.ID(childComplexity), true

	case "CallCenter.Name":
		if e.complexity.CallCenter.Name == nil {
			break
		}

		return e.complexity.CallCenter.Name(childComplexity), true

	case "CallCenter.Password":
		if e.complexity.CallCenter.Password == nil {
			break
		}

		return e.complexity.CallCenter.Password(childComplexity), true

	case "CallCenter.SubChurches":
		if e.complexity.CallCenter.SubChurches == nil {
			break
		}

		return e.complexity.CallCenter.SubChurches(childComplexity), true

	case "CallCenter.Token":
		if e.complexity.CallCenter.Token == nil {
			break
		}

		return e.complexity.CallCenter.Token(childComplexity), true

	case "CallCenter.Types":
		if e.complexity.CallCenter.Types == nil {
			break
		}

		return e.complexity.CallCenter.Types(childComplexity), true

	case "CallCenter.UpdatedAt":
		if e.complexity.CallCenter.UpdatedAt == nil {
			break
		}

		return e.complexity.CallCenter.UpdatedAt(childComplexity), true

	case "Church.createdAt":
		if e.complexity.Church.CreatedAt == nil {
			break
		}

		return e.complexity.Church.CreatedAt(childComplexity), true

	case "Church.email":
		if e.complexity.Church.Email == nil {
			break
		}

		return e.complexity.Church.Email(childComplexity), true

	case "Church.id":
		if e.complexity.Church.ID == nil {
			break
		}

		return e.complexity.Church.ID(childComplexity), true

	case "Church.name":
		if e.complexity.Church.Name == nil {
			break
		}

		return e.complexity.Church.Name(childComplexity), true

	case "Church.password":
		if e.complexity.Church.Password == nil {
			break
		}

		return e.complexity.Church.Password(childComplexity), true

	case "Church.subChurches":
		if e.complexity.Church.SubChurches == nil {
			break
		}

		return e.complexity.Church.SubChurches(childComplexity), true

	case "Church.token":
		if e.complexity.Church.Token == nil {
			break
		}

		return e.complexity.Church.Token(childComplexity), true

	case "Church.types":
		if e.complexity.Church.Types == nil {
			break
		}

		return e.complexity.Church.Types(childComplexity), true

	case "Church.updatedAt":
		if e.complexity.Church.UpdatedAt == nil {
			break
		}

		return e.complexity.Church.UpdatedAt(childComplexity), true

	case "ChurchMinistryRole.id":
		if e.complexity.ChurchMinistryRole.ID == nil {
			break
		}

		return e.complexity.ChurchMinistryRole.ID(childComplexity), true

	case "ChurchMinistryRole.role":
		if e.complexity.ChurchMinistryRole.Role == nil {
			break
		}

		return e.complexity.ChurchMinistryRole.Role(childComplexity), true

	case "DateInfo.month":
		if e.complexity.DateInfo.Month == nil {
			break
		}

		return e.complexity.DateInfo.Month(childComplexity), true

	case "DateInfo.weekOfMonth":
		if e.complexity.DateInfo.WeekOfMonth == nil {
			break
		}

		return e.complexity.DateInfo.WeekOfMonth(childComplexity), true

	case "EmergencyContact.createdAt":
		if e.complexity.EmergencyContact.CreatedAt == nil {
			break
		}

		return e.complexity.EmergencyContact.CreatedAt(childComplexity), true

	case "EmergencyContact.id":
		if e.complexity.EmergencyContact.ID == nil {
			break
		}

		return e.complexity.EmergencyContact.ID(childComplexity), true

	case "EmergencyContact.name":
		if e.complexity.EmergencyContact.Name == nil {
			break
		}

		return e.complexity.EmergencyContact.Name(childComplexity), true

	case "EmergencyContact.phoneNumber":
		if e.complexity.EmergencyContact.PhoneNumber == nil {
			break
		}

		return e.complexity.EmergencyContact.PhoneNumber(childComplexity), true

	case "EmergencyContact.relation":
		if e.complexity.EmergencyContact.Relation == nil {
			break
		}

		return e.complexity.EmergencyContact.Relation(childComplexity), true

	case "EmergencyContact.updatedAt":
		if e.complexity.EmergencyContact.UpdatedAt == nil {
			break
		}

		return e.complexity.EmergencyContact.UpdatedAt(childComplexity), true

	case "FamilyInfo.children":
		if e.complexity.FamilyInfo.Children == nil {
			break
		}

		return e.complexity.FamilyInfo.Children(childComplexity), true

	case "FamilyInfo.createdAt":
		if e.complexity.FamilyInfo.CreatedAt == nil {
			break
		}

		return e.complexity.FamilyInfo.CreatedAt(childComplexity), true

	case "FamilyInfo.dateOfBirth":
		if e.complexity.FamilyInfo.DateOfBirth == nil {
			break
		}

		return e.complexity.FamilyInfo.DateOfBirth(childComplexity), true

	case "FamilyInfo.education":
		if e.complexity.FamilyInfo.Education == nil {
			break
		}

		return e.complexity.FamilyInfo.Education(childComplexity), true

	case "FamilyInfo.emergencyContact":
		if e.complexity.FamilyInfo.EmergencyContact == nil {
			break
		}

		return e.complexity.FamilyInfo.EmergencyContact(childComplexity), true

	case "FamilyInfo.emergencyContactId":
		if e.complexity.FamilyInfo.EmergencyContactID == nil {
			break
		}

		return e.complexity.FamilyInfo.EmergencyContactID(childComplexity), true

	case "FamilyInfo.id":
		if e.complexity.FamilyInfo.ID == nil {
			break
		}

		return e.complexity.FamilyInfo.ID(childComplexity), true

	case "FamilyInfo.lastName":
		if e.complexity.FamilyInfo.LastName == nil {
			break
		}

		return e.complexity.FamilyInfo.LastName(childComplexity), true

	case "FamilyInfo.member":
		if e.complexity.FamilyInfo.Member == nil {
			break
		}

		return e.complexity.FamilyInfo.Member(childComplexity), true

	case "FamilyInfo.memberID":
		if e.complexity.FamilyInfo.MemberID == nil {
			break
		}

		return e.complexity.FamilyInfo.MemberID(childComplexity), true

	case "FamilyInfo.nextOfKin":
		if e.complexity.FamilyInfo.NextOfKin == nil {
			break
		}

		return e.complexity.FamilyInfo.NextOfKin(childComplexity), true

	case "FamilyInfo.occupation":
		if e.complexity.FamilyInfo.Occupation == nil {
			break
		}

		return e.complexity.FamilyInfo.Occupation(childComplexity), true

	case "FamilyInfo.occupationId":
		if e.complexity.FamilyInfo.OccupationID == nil {
			break
		}

		return e.complexity.FamilyInfo.OccupationID(childComplexity), true

	case "FamilyInfo.relationship":
		if e.complexity.FamilyInfo.Relationship == nil {
			break
		}

		return e.complexity.FamilyInfo.Relationship(childComplexity), true

	case "FamilyInfo.spouse":
		if e.complexity.FamilyInfo.Spouse == nil {
			break
		}

		return e.complexity.FamilyInfo.Spouse(childComplexity), true

	case "FamilyInfo.spouseId":
		if e.complexity.FamilyInfo.SpouseID == nil {
			break
		}

		return e.complexity.FamilyInfo.SpouseID(childComplexity), true

	case "FamilyInfo.spouseNameNotVbci":
		if e.complexity.FamilyInfo.SpouseNameNotVbci == nil {
			break
		}

		return e.complexity.FamilyInfo.SpouseNameNotVbci(childComplexity), true

	case "FamilyInfo.spousePhoneNumberNotVbci":
		if e.complexity.FamilyInfo.SpousePhoneNumberNotVbci == nil {
			break
		}

		return e.complexity.FamilyInfo.SpousePhoneNumberNotVbci(childComplexity), true

	case "FamilyInfo.updatedAt":
		if e.complexity.FamilyInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.FamilyInfo.UpdatedAt(childComplexity), true

	case "Finance.createdAt":
		if e.complexity.Finance.CreatedAt == nil {
			break
		}

		return e.complexity.Finance.CreatedAt(childComplexity), true

	case "Finance.email":
		if e.complexity.Finance.Email == nil {
			break
		}

		return e.complexity.Finance.Email(childComplexity), true

	case "Finance.id":
		if e.complexity.Finance.ID == nil {
			break
		}

		return e.complexity.Finance.ID(childComplexity), true

	case "Finance.name":
		if e.complexity.Finance.Name == nil {
			break
		}

		return e.complexity.Finance.Name(childComplexity), true

	case "Finance.password":
		if e.complexity.Finance.Password == nil {
			break
		}

		return e.complexity.Finance.Password(childComplexity), true

	case "Finance.subChurches":
		if e.complexity.Finance.SubChurches == nil {
			break
		}

		return e.complexity.Finance.SubChurches(childComplexity), true

	case "Finance.token":
		if e.complexity.Finance.Token == nil {
			break
		}

		return e.complexity.Finance.Token(childComplexity), true

	case "Finance.types":
		if e.complexity.Finance.Types == nil {
			break
		}

		return e.complexity.Finance.Types(childComplexity), true

	case "Finance.updatedAt":
		if e.complexity.Finance.UpdatedAt == nil {
			break
		}

		return e.complexity.Finance.UpdatedAt(childComplexity), true

	case "JobInfo.company":
		if e.complexity.JobInfo.Company == nil {
			break
		}

		return e.complexity.JobInfo.Company(childComplexity), true

	case "JobInfo.createdAt":
		if e.complexity.JobInfo.CreatedAt == nil {
			break
		}

		return e.complexity.JobInfo.CreatedAt(childComplexity), true

	case "JobInfo.id":
		if e.complexity.JobInfo.ID == nil {
			break
		}

		return e.complexity.JobInfo.ID(childComplexity), true

	case "JobInfo.position":
		if e.complexity.JobInfo.Position == nil {
			break
		}

		return e.complexity.JobInfo.Position(childComplexity), true

	case "JobInfo.typeOfWork":
		if e.complexity.JobInfo.TypeOfWork == nil {
			break
		}

		return e.complexity.JobInfo.TypeOfWork(childComplexity), true

	case "JobInfo.updatedAt":
		if e.complexity.JobInfo.UpdatedAt == nil {
			break
		}

		return e.complexity.JobInfo.UpdatedAt(childComplexity), true

	case "JobInfo.workExperience":
		if e.complexity.JobInfo.WorkExperience == nil {
			break
		}

		return e.complexity.JobInfo.WorkExperience(childComplexity), true

	case "LeaderRegistrationsDistribution.leaderID":
		if e.complexity.LeaderRegistrationsDistribution.LeaderID == nil {
			break
		}

		return e.complexity.LeaderRegistrationsDistribution.LeaderID(childComplexity), true

	case "LeaderRegistrationsDistribution.registrationIDs":
		if e.complexity.LeaderRegistrationsDistribution.RegistrationIDs == nil {
			break
		}

		return e.complexity.LeaderRegistrationsDistribution.RegistrationIDs(childComplexity), true

	case "Member.churchMinistries":
		if e.complexity.Member.ChurchMinistries == nil {
			break
		}

		return e.complexity.Member.ChurchMinistries(childComplexity), true

	case "Member.createdAt":
		if e.complexity.Member.CreatedAt == nil {
			break
		}

		return e.complexity.Member.CreatedAt(childComplexity), true

	case "Member.day":
		if e.complexity.Member.Day == nil {
			break
		}

		return e.complexity.Member.Day(childComplexity), true

	case "Member.email":
		if e.complexity.Member.Email == nil {
			break
		}

		return e.complexity.Member.Email(childComplexity), true

	case "Member.id":
		if e.complexity.Member.ID == nil {
			break
		}

		return e.complexity.Member.ID(childComplexity), true

	case "Member.leader":
		if e.complexity.Member.Leader == nil {
			break
		}

		return e.complexity.Member.Leader(childComplexity), true

	case "Member.LeaderID":
		if e.complexity.Member.LeaderID == nil {
			break
		}

		return e.complexity.Member.LeaderID(childComplexity), true

	case "Member.location":
		if e.complexity.Member.Location == nil {
			break
		}

		return e.complexity.Member.Location(childComplexity), true

	case "Member.name":
		if e.complexity.Member.Name == nil {
			break
		}

		return e.complexity.Member.Name(childComplexity), true

	case "Member.password":
		if e.complexity.Member.Password == nil {
			break
		}

		return e.complexity.Member.Password(childComplexity), true

	case "Member.personalInfor":
		if e.complexity.Member.PersonalInfor == nil {
			break
		}

		return e.complexity.Member.PersonalInfor(childComplexity), true

	case "Member.personalInforId":
		if e.complexity.Member.PersonalInforID == nil {
			break
		}

		return e.complexity.Member.PersonalInforID(childComplexity), true

	case "Member.phoneNumber":
		if e.complexity.Member.PhoneNumber == nil {
			break
		}

		return e.complexity.Member.PhoneNumber(childComplexity), true

	case "Member.pwood":
		if e.complexity.Member.Pwood == nil {
			break
		}

		return e.complexity.Member.Pwood(childComplexity), true

	case "Member.ReferenceIDCount":
		if e.complexity.Member.ReferenceIDCount == nil {
			break
		}

		return e.complexity.Member.ReferenceIDCount(childComplexity), true

	case "Member.registrations":
		if e.complexity.Member.Registrations == nil {
			break
		}

		return e.complexity.Member.Registrations(childComplexity), true

	case "Member.subChurch":
		if e.complexity.Member.SubChurch == nil {
			break
		}

		return e.complexity.Member.SubChurch(childComplexity), true

	case "Member.subChurchID":
		if e.complexity.Member.SubChurchID == nil {
			break
		}

		return e.complexity.Member.SubChurchID(childComplexity), true

	case "Member.token":
		if e.complexity.Member.Token == nil {
			break
		}

		return e.complexity.Member.Token(childComplexity), true

	case "Member.types":
		if e.complexity.Member.Types == nil {
			break
		}

		return e.complexity.Member.Types(childComplexity), true

	case "Member.updatedAt":
		if e.complexity.Member.UpdatedAt == nil {
			break
		}

		return e.complexity.Member.UpdatedAt(childComplexity), true

	case "MemberChildren.childrenId":
		if e.complexity.MemberChildren.ChildrenID == nil {
			break
		}

		return e.complexity.MemberChildren.ChildrenID(childComplexity), true

	case "MemberChildren.id":
		if e.complexity.MemberChildren.ID == nil {
			break
		}

		return e.complexity.MemberChildren.ID(childComplexity), true

	case "MemberChildren.ParentID":
		if e.complexity.MemberChildren.ParentID == nil {
			break
		}

		return e.complexity.MemberChildren.ParentID(childComplexity), true

	case "MemberChurchMinistryRole.ChurchMinistryRole":
		if e.complexity.MemberChurchMinistryRole.ChurchMinistryRole == nil {
			break
		}

		return e.complexity.MemberChurchMinistryRole.ChurchMinistryRole(childComplexity), true

	case "MemberChurchMinistryRole.churchMinistryRoleID":
		if e.complexity.MemberChurchMinistryRole.ChurchMinistryRoleID == nil {
			break
		}

		return e.complexity.MemberChurchMinistryRole.ChurchMinistryRoleID(childComplexity), true

	case "MemberChurchMinistryRole.id":
		if e.complexity.MemberChurchMinistryRole.ID == nil {
			break
		}

		return e.complexity.MemberChurchMinistryRole.ID(childComplexity), true

	case "MemberChurchMinistryRole.memberID":
		if e.complexity.MemberChurchMinistryRole.MemberID == nil {
			break
		}

		return e.complexity.MemberChurchMinistryRole.MemberID(childComplexity), true

	case "MigrationRequest.createdAt":
		if e.complexity.MigrationRequest.CreatedAt == nil {
			break
		}

		return e.complexity.MigrationRequest.CreatedAt(childComplexity), true

	case "MigrationRequest.destinationChurchID":
		if e.complexity.MigrationRequest.DestinationChurchID == nil {
			break
		}

		return e.complexity.MigrationRequest.DestinationChurchID(childComplexity), true

	case "MigrationRequest.id":
		if e.complexity.MigrationRequest.ID == nil {
			break
		}

		return e.complexity.MigrationRequest.ID(childComplexity), true

	case "MigrationRequest.locationEnd":
		if e.complexity.MigrationRequest.LocationEnd == nil {
			break
		}

		return e.complexity.MigrationRequest.LocationEnd(childComplexity), true

	case "MigrationRequest.locationFrom":
		if e.complexity.MigrationRequest.LocationFrom == nil {
			break
		}

		return e.complexity.MigrationRequest.LocationFrom(childComplexity), true

	case "MigrationRequest.memberID":
		if e.complexity.MigrationRequest.MemberID == nil {
			break
		}

		return e.complexity.MigrationRequest.MemberID(childComplexity), true

	case "MigrationRequest.MemberName":
		if e.complexity.MigrationRequest.MemberName == nil {
			break
		}

		return e.complexity.MigrationRequest.MemberName(childComplexity), true

	case "MigrationRequest.status":
		if e.complexity.MigrationRequest.Status == nil {
			break
		}

		return e.complexity.MigrationRequest.Status(childComplexity), true

	case "MigrationRequest.statusID":
		if e.complexity.MigrationRequest.StatusID == nil {
			break
		}

		return e.complexity.MigrationRequest.StatusID(childComplexity), true

	case "Mutation.addAnotherType":
		if e.complexity.Mutation.AddAnotherType == nil {
			break
		}

		args, err := ec.field_Mutation_addAnotherType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddAnotherType(childComplexity, args["memberId"].(string), args["types"].(*string)), true

	case "Mutation.approveSubChurchMigration":
		if e.complexity.Mutation.ApproveSubChurchMigration == nil {
			break
		}

		args, err := ec.field_Mutation_approveSubChurchMigration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ApproveSubChurchMigration(childComplexity, args["requestId"].(string)), true

	case "Mutation.assignLeader":
		if e.complexity.Mutation.AssignLeader == nil {
			break
		}

		args, err := ec.field_Mutation_assignLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignLeader(childComplexity, args["input"].(*model.AssignLeaderInput)), true

	case "Mutation.assignLeaderMemberRegisterToAnotherLeader":
		if e.complexity.Mutation.AssignLeaderMemberRegisterToAnotherLeader == nil {
			break
		}

		args, err := ec.field_Mutation_assignLeaderMemberRegisterToAnotherLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignLeaderMemberRegisterToAnotherLeader(childComplexity, args["sendToLeaderID"].(string), args["sendFromLeaderID"].(string)), true

	case "Mutation.assignMemberToLeaderbySubchurch":
		if e.complexity.Mutation.AssignMemberToLeaderbySubchurch == nil {
			break
		}

		args, err := ec.field_Mutation_assignMemberToLeaderbySubchurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignMemberToLeaderbySubchurch(childComplexity, args["leaderID"].(string), args["memberID"].(string)), true

	case "Mutation.assignSubLeaderToMemberRegistration":
		if e.complexity.Mutation.AssignSubLeaderToMemberRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_assignSubLeaderToMemberRegistration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignSubLeaderToMemberRegistration(childComplexity, args["callAgentId"].(string), args["day"].([]string)), true

	case "Mutation.assignSubLeaderToMemberRegistrationArray":
		if e.complexity.Mutation.AssignSubLeaderToMemberRegistrationArray == nil {
			break
		}

		args, err := ec.field_Mutation_assignSubLeaderToMemberRegistrationArray_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AssignSubLeaderToMemberRegistrationArray(childComplexity, args["input"].([]*model.AssignSubLeaderToMemberRegistrationArrayInput)), true

	case "Mutation.cleanUpPhoneNumbers":
		if e.complexity.Mutation.CleanUpPhoneNumbers == nil {
			break
		}

		return e.complexity.Mutation.CleanUpPhoneNumbers(childComplexity), true

	case "Mutation.CreateCallCenterForSubChurchs":
		if e.complexity.Mutation.CreateCallCenterForSubChurchs == nil {
			break
		}

		args, err := ec.field_Mutation_CreateCallCenterForSubChurchs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCallCenterForSubChurchs(childComplexity, args["name"].(string), args["subChurchIDs"].([]string)), true

	case "Mutation.createChurch":
		if e.complexity.Mutation.CreateChurch == nil {
			break
		}

		args, err := ec.field_Mutation_createChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateChurch(childComplexity, args["name"].(string), args["email"].(string), args["password"].(*string)), true

	case "Mutation.createMember":
		if e.complexity.Mutation.CreateMember == nil {
			break
		}

		args, err := ec.field_Mutation_createMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMember(childComplexity, args["input"].(*model.CreateMemberInput)), true

	case "Mutation.createMemberBysubLeader":
		if e.complexity.Mutation.CreateMemberBysubLeader == nil {
			break
		}

		args, err := ec.field_Mutation_createMemberBysubLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMemberBysubLeader(childComplexity, args["input"].(*model.CreateMemberInputBySub)), true

	case "Mutation.createMemberbySubchurch":
		if e.complexity.Mutation.CreateMemberbySubchurch == nil {
			break
		}

		args, err := ec.field_Mutation_createMemberbySubchurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMemberbySubchurch(childComplexity, args["input"].(*model.CreateMemberInput)), true

	case "Mutation.createMianChurch":
		if e.complexity.Mutation.CreateMianChurch == nil {
			break
		}

		args, err := ec.field_Mutation_createMianChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMianChurch(childComplexity, args["subChurchName"].(*string)), true

	case "Mutation.createRegistration":
		if e.complexity.Mutation.CreateRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_createRegistration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRegistration(childComplexity, args["memberId"].(string), args["input"].(model.CreateRegistrationInput)), true

	case "Mutation.createRegistrationArray":
		if e.complexity.Mutation.CreateRegistrationArray == nil {
			break
		}

		args, err := ec.field_Mutation_createRegistrationArray_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRegistrationArray(childComplexity, args["input"].([]*model.RegistrationArrayInput)), true

	case "Mutation.createSubChurch":
		if e.complexity.Mutation.CreateSubChurch == nil {
			break
		}

		args, err := ec.field_Mutation_createSubChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubChurch(childComplexity, args["subChurchName"].(*string), args["branch"].(bool), args["isLocal"].(*bool)), true

	case "Mutation.createSubChurchesWithMainChurch":
		if e.complexity.Mutation.CreateSubChurchesWithMainChurch == nil {
			break
		}

		args, err := ec.field_Mutation_createSubChurchesWithMainChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubChurchesWithMainChurch(childComplexity, args["mainChurchId"].(string), args["subChurchNames"].([]string)), true

	case "Mutation.dataMembers":
		if e.complexity.Mutation.DataMembers == nil {
			break
		}

		return e.complexity.Mutation.DataMembers(childComplexity), true

	case "Mutation.deleteAllMembersBySubChurch":
		if e.complexity.Mutation.DeleteAllMembersBySubChurch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAllMembersBySubChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAllMembersBySubChurch(childComplexity, args["subChurchId"].(string)), true

	case "Mutation.deleteAssignSubLeaderToMemberRegistration":
		if e.complexity.Mutation.DeleteAssignSubLeaderToMemberRegistration == nil {
			break
		}

		return e.complexity.Mutation.DeleteAssignSubLeaderToMemberRegistration(childComplexity), true

	case "Mutation.deleteChurch":
		if e.complexity.Mutation.DeleteChurch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteChurch(childComplexity, args["mainChurchId"].(string)), true

	case "Mutation.deleteMember":
		if e.complexity.Mutation.DeleteMember == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMember(childComplexity, args["memberId"].(string)), true

	case "Mutation.deleteRegistration":
		if e.complexity.Mutation.DeleteRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRegistration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRegistration(childComplexity, args["registrationId"].(string)), true

	case "Mutation.deleteSubChurch":
		if e.complexity.Mutation.DeleteSubChurch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubChurch(childComplexity, args["subChurchId"].(string)), true

	case "Mutation.distributeRegistrationsToLeaders":
		if e.complexity.Mutation.DistributeRegistrationsToLeaders == nil {
			break
		}

		args, err := ec.field_Mutation_distributeRegistrationsToLeaders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DistributeRegistrationsToLeaders(childComplexity, args["leaderIds"].([]string)), true

	case "Mutation.importMemberData":
		if e.complexity.Mutation.ImportMemberData == nil {
			break
		}

		args, err := ec.field_Mutation_importMemberData_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ImportMemberData(childComplexity, args["file"].(graphql.Upload), args["ChurchID"].(*string)), true

	case "Mutation.logOut":
		if e.complexity.Mutation.LogOut == nil {
			break
		}

		return e.complexity.Mutation.LogOut(childComplexity), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(model.LoginLeaderInput)), true

	case "Mutation.memberlogin":
		if e.complexity.Mutation.Memberlogin == nil {
			break
		}

		args, err := ec.field_Mutation_memberlogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Memberlogin(childComplexity, args["input"].(model.LoginLeaderInput)), true

	case "Mutation.rejectSubChurchMigration":
		if e.complexity.Mutation.RejectSubChurchMigration == nil {
			break
		}

		args, err := ec.field_Mutation_rejectSubChurchMigration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RejectSubChurchMigration(childComplexity, args["requestId"].(string)), true

	case "Mutation.removeLeader":
		if e.complexity.Mutation.RemoveLeader == nil {
			break
		}

		args, err := ec.field_Mutation_removeLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveLeader(childComplexity, args["memberId"].(string)), true

	case "Mutation.ReportRegistrationByLeader":
		if e.complexity.Mutation.ReportRegistrationByLeader == nil {
			break
		}

		args, err := ec.field_Mutation_ReportRegistrationByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReportRegistrationByLeader(childComplexity, args["report"].(*model.ReportRegistrationInput), args["registrationID"].(string), args["leaderID"].(string)), true

	case "Mutation.requestSubChurchMigration":
		if e.complexity.Mutation.RequestSubChurchMigration == nil {
			break
		}

		args, err := ec.field_Mutation_requestSubChurchMigration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestSubChurchMigration(childComplexity, args["input"].(model.SubChurchMigrationInput)), true

	case "Mutation.tempLeadercreateRegistrationArray":
		if e.complexity.Mutation.TempLeadercreateRegistrationArray == nil {
			break
		}

		args, err := ec.field_Mutation_tempLeadercreateRegistrationArray_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TempLeadercreateRegistrationArray(childComplexity, args["input"].([]*model.CreateRegistrationInput), args["registrationID"].([]*string)), true

	case "Mutation.updateCallCenter":
		if e.complexity.Mutation.UpdateCallCenter == nil {
			break
		}

		args, err := ec.field_Mutation_updateCallCenter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCallCenter(childComplexity, args["input"].(model.UpdateLeaderProfileInput), args["callCenterId"].(string)), true

	case "Mutation.updateLeader":
		if e.complexity.Mutation.UpdateLeader == nil {
			break
		}

		args, err := ec.field_Mutation_updateLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLeader(childComplexity, args["input"].(model.UpdateLeaderProfileInput), args["memberId"].(string)), true

	case "Mutation.updateLeaderTypes":
		if e.complexity.Mutation.UpdateLeaderTypes == nil {
			break
		}

		args, err := ec.field_Mutation_updateLeaderTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLeaderTypes(childComplexity, args["id"].(*string), args["tags"].([]string)), true

	case "Mutation.updateMember":
		if e.complexity.Mutation.UpdateMember == nil {
			break
		}

		args, err := ec.field_Mutation_updateMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMember(childComplexity, args["input"].(model.UpdateMemberInput), args["memberId"].(string)), true

	case "Mutation.updateMemberEmergencyContact":
		if e.complexity.Mutation.UpdateMemberEmergencyContact == nil {
			break
		}

		args, err := ec.field_Mutation_updateMemberEmergencyContact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMemberEmergencyContact(childComplexity, args["input"].(model.EmergencyContactInput), args["memberId"].(string)), true

	case "Mutation.updateMemberFamilyInfo":
		if e.complexity.Mutation.UpdateMemberFamilyInfo == nil {
			break
		}

		args, err := ec.field_Mutation_updateMemberFamilyInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMemberFamilyInfo(childComplexity, args["input"].(model.UpdateMemberFamilyInfoInput), args["memberId"].(string)), true

	case "Mutation.updateMemberJobInfoInput":
		if e.complexity.Mutation.UpdateMemberJobInfoInput == nil {
			break
		}

		args, err := ec.field_Mutation_updateMemberJobInfoInput_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMemberJobInfoInput(childComplexity, args["input"].(model.JobInfoInput), args["memberId"].(string)), true

	case "Mutation.updateMinistryRoleByLeader":
		if e.complexity.Mutation.UpdateMinistryRoleByLeader == nil {
			break
		}

		args, err := ec.field_Mutation_updateMinistryRoleByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMinistryRoleByLeader(childComplexity, args["input"].(model.ChurchMinistryRoleInpt), args["memberID"].(string)), true

	case "Mutation.updateRegistration":
		if e.complexity.Mutation.UpdateRegistration == nil {
			break
		}

		args, err := ec.field_Mutation_updateRegistration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegistration(childComplexity, args["input"].(model.CreateRegistrationInput), args["registrationId"].(string)), true

	case "Mutation.updateRegistrationArray":
		if e.complexity.Mutation.UpdateRegistrationArray == nil {
			break
		}

		args, err := ec.field_Mutation_updateRegistrationArray_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegistrationArray(childComplexity, args["input"].([]*model.RegistrationArrayInputs)), true

	case "Mutation.updateRegistrationByLeader":
		if e.complexity.Mutation.UpdateRegistrationByLeader == nil {
			break
		}

		args, err := ec.field_Mutation_updateRegistrationByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegistrationByLeader(childComplexity, args["input"].(model.CreateRegistrationInput), args["registrationID"].(string), args["leaderID"].(string)), true

	case "Mutation.updatesubChurch":
		if e.complexity.Mutation.UpdatesubChurch == nil {
			break
		}

		args, err := ec.field_Mutation_updatesubChurch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatesubChurch(childComplexity, args["input"].(model.UpdateLeaderProfileInput), args["subChurchId"].(string)), true

	case "Query.CallRoom":
		if e.complexity.Query.CallRoom == nil {
			break
		}

		args, err := ec.field_Query_CallRoom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CallRoom(childComplexity, args["subChurchId"].(string)), true

	case "Query.currentWeekRegistrations":
		if e.complexity.Query.CurrentWeekRegistrations == nil {
			break
		}

		return e.complexity.Query.CurrentWeekRegistrations(childComplexity), true

	case "Query.currentWeekRegistrationsforCallCenter":
		if e.complexity.Query.CurrentWeekRegistrationsforCallCenter == nil {
			break
		}

		return e.complexity.Query.CurrentWeekRegistrationsforCallCenter(childComplexity), true

	case "Query.currentWeekRegistrationsforsub":
		if e.complexity.Query.CurrentWeekRegistrationsforsub == nil {
			break
		}

		args, err := ec.field_Query_currentWeekRegistrationsforsub_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CurrentWeekRegistrationsforsub(childComplexity, args["subChurchId"].(string)), true

	case "Query.GetAllDaysFormassignCallAgentToMemberRegistration":
		if e.complexity.Query.GetAllDaysFormassignCallAgentToMemberRegistration == nil {
			break
		}

		return e.complexity.Query.GetAllDaysFormassignCallAgentToMemberRegistration(childComplexity), true

	case "Query.GetAllMainChurch":
		if e.complexity.Query.GetAllMainChurch == nil {
			break
		}

		return e.complexity.Query.GetAllMainChurch(childComplexity), true

	case "Query.GetAllMemberBySubLeaderToLeader":
		if e.complexity.Query.GetAllMemberBySubLeaderToLeader == nil {
			break
		}

		args, err := ec.field_Query_GetAllMemberBySubLeaderToLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllMemberBySubLeaderToLeader(childComplexity, args["subChurchID"].(string), args["day"].(string)), true

	case "Query.GetAllMembersByLeader":
		if e.complexity.Query.GetAllMembersByLeader == nil {
			break
		}

		args, err := ec.field_Query_GetAllMembersByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllMembersByLeader(childComplexity, args["leaderID"].(string)), true

	case "Query.GetAllMembersBySubChurchID":
		if e.complexity.Query.GetAllMembersBySubChurchID == nil {
			break
		}

		args, err := ec.field_Query_GetAllMembersBySubChurchID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllMembersBySubChurchID(childComplexity, args["subChurchId"].(string)), true

	case "Query.GetAllMembersBySubChurchIDForCallAgent":
		if e.complexity.Query.GetAllMembersBySubChurchIDForCallAgent == nil {
			break
		}

		args, err := ec.field_Query_GetAllMembersBySubChurchIDForCallAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllMembersBySubChurchIDForCallAgent(childComplexity, args["subChurchId"].(string)), true

	case "Query.GetAllRegistersByMemberID":
		if e.complexity.Query.GetAllRegistersByMemberID == nil {
			break
		}

		args, err := ec.field_Query_GetAllRegistersByMemberID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllRegistersByMemberID(childComplexity, args["MemberId"].(string)), true

	case "Query.GetAllRegistersByTempLeader":
		if e.complexity.Query.GetAllRegistersByTempLeader == nil {
			break
		}

		args, err := ec.field_Query_GetAllRegistersByTempLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllRegistersByTempLeader(childComplexity, args["tempLeaderID"].(string)), true

	case "Query.GetAllSubChurchByCallCenter":
		if e.complexity.Query.GetAllSubChurchByCallCenter == nil {
			break
		}

		args, err := ec.field_Query_GetAllSubChurchByCallCenter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllSubChurchByCallCenter(childComplexity, args["CallCenterId"].(string)), true

	case "Query.GetAllSubChurchLeader":
		if e.complexity.Query.GetAllSubChurchLeader == nil {
			break
		}

		args, err := ec.field_Query_GetAllSubChurchLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllSubChurchLeader(childComplexity, args["subChurchId"].(string)), true

	case "Query.GetAllSubLeaderByLeader":
		if e.complexity.Query.GetAllSubLeaderByLeader == nil {
			break
		}

		args, err := ec.field_Query_GetAllSubLeaderByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllSubLeaderByLeader(childComplexity, args["subChurchID"].(string), args["day"].(string)), true

	case "Query.GetAllmembersByDaysForCallAgent":
		if e.complexity.Query.GetAllmembersByDaysForCallAgent == nil {
			break
		}

		args, err := ec.field_Query_GetAllmembersByDaysForCallAgent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllmembersByDaysForCallAgent(childComplexity, args["CallAgentId"].(string)), true

	case "Query.GetAllsubChurch":
		if e.complexity.Query.GetAllsubChurch == nil {
			break
		}

		return e.complexity.Query.GetAllsubChurch(childComplexity), true

	case "Query.GetAllsubChurchByMainChurchID":
		if e.complexity.Query.GetAllsubChurchByMainChurchID == nil {
			break
		}

		args, err := ec.field_Query_GetAllsubChurchByMainChurchID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllsubChurchByMainChurchID(childComplexity, args["mainChurchId"].(string)), true

	case "Query.GetAllsubChurchByMemberId":
		if e.complexity.Query.GetAllsubChurchByMemberID == nil {
			break
		}

		args, err := ec.field_Query_GetAllsubChurchByMemberId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAllsubChurchByMemberID(childComplexity, args["memberId"].(string)), true

	case "Query.GetCallAgent":
		if e.complexity.Query.GetCallAgent == nil {
			break
		}

		return e.complexity.Query.GetCallAgent(childComplexity), true

	case "Query.GetCallCenter":
		if e.complexity.Query.GetCallCenter == nil {
			break
		}

		return e.complexity.Query.GetCallCenter(childComplexity), true

	case "Query.GetCaller":
		if e.complexity.Query.GetCaller == nil {
			break
		}

		return e.complexity.Query.GetCaller(childComplexity), true

	case "Query.GetMigration":
		if e.complexity.Query.GetMigration == nil {
			break
		}

		args, err := ec.field_Query_GetMigration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMigration(childComplexity, args["id"].(string)), true

	case "Query.GetMigrationdestinationID":
		if e.complexity.Query.GetMigrationdestinationID == nil {
			break
		}

		args, err := ec.field_Query_GetMigrationdestinationID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetMigrationdestinationID(childComplexity, args["destinationChurchID"].(string)), true

	case "Query.GetNoteficationByLeader":
		if e.complexity.Query.GetNoteficationByLeader == nil {
			break
		}

		args, err := ec.field_Query_GetNoteficationByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNoteficationByLeader(childComplexity, args["subChurchID"].(string), args["day"].(*string)), true

	case "Query.Getmember":
		if e.complexity.Query.Getmember == nil {
			break
		}

		args, err := ec.field_Query_Getmember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Getmember(childComplexity, args["id"].(string)), true

	case "Query.Getmembers":
		if e.complexity.Query.Getmembers == nil {
			break
		}

		return e.complexity.Query.Getmembers(childComplexity), true

	case "Query.GetsubChurchByID":
		if e.complexity.Query.GetsubChurchByID == nil {
			break
		}

		args, err := ec.field_Query_GetsubChurchByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetsubChurchByID(childComplexity, args["id"].(string)), true

	case "Query.LastFourCommentsForMember":
		if e.complexity.Query.LastFourCommentsForMember == nil {
			break
		}

		args, err := ec.field_Query_LastFourCommentsForMember_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.LastFourCommentsForMember(childComplexity, args["memberID"].(string)), true

	case "Query.MembersBySubChurchID":
		if e.complexity.Query.MembersBySubChurchID == nil {
			break
		}

		args, err := ec.field_Query_MembersBySubChurchID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MembersBySubChurchID(childComplexity, args["subChurchId"].(string)), true

	case "Query.registrationsByLeader":
		if e.complexity.Query.RegistrationsByLeader == nil {
			break
		}

		args, err := ec.field_Query_registrationsByLeader_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RegistrationsByLeader(childComplexity, args["mleaderID"].(string)), true

	case "Query.todaysMembers":
		if e.complexity.Query.TodaysMembers == nil {
			break
		}

		return e.complexity.Query.TodaysMembers(childComplexity), true

	case "Query.WeekRegistrationsforSub":
		if e.complexity.Query.WeekRegistrationsforSub == nil {
			break
		}

		return e.complexity.Query.WeekRegistrationsforSub(childComplexity), true

	case "Registration.absence":
		if e.complexity.Registration.Absence == nil {
			break
		}

		return e.complexity.Registration.Absence(childComplexity), true

	case "Registration.createdAt":
		if e.complexity.Registration.CreatedAt == nil {
			break
		}

		return e.complexity.Registration.CreatedAt(childComplexity), true

	case "Registration.done":
		if e.complexity.Registration.Done == nil {
			break
		}

		return e.complexity.Registration.Done(childComplexity), true

	case "Registration.id":
		if e.complexity.Registration.ID == nil {
			break
		}

		return e.complexity.Registration.ID(childComplexity), true

	case "Registration.lastComment":
		if e.complexity.Registration.LastComment == nil {
			break
		}

		return e.complexity.Registration.LastComment(childComplexity), true

	case "Registration.leader":
		if e.complexity.Registration.Leader == nil {
			break
		}

		return e.complexity.Registration.Leader(childComplexity), true

	case "Registration.leaderID":
		if e.complexity.Registration.LeaderID == nil {
			break
		}

		return e.complexity.Registration.LeaderID(childComplexity), true

	case "Registration.leaderName":
		if e.complexity.Registration.LeaderName == nil {
			break
		}

		return e.complexity.Registration.LeaderName(childComplexity), true

	case "Registration.member":
		if e.complexity.Registration.Member == nil {
			break
		}

		return e.complexity.Registration.Member(childComplexity), true

	case "Registration.memberID":
		if e.complexity.Registration.MemberID == nil {
			break
		}

		return e.complexity.Registration.MemberID(childComplexity), true

	case "Registration.memberName":
		if e.complexity.Registration.MemberName == nil {
			break
		}

		return e.complexity.Registration.MemberName(childComplexity), true

	case "Registration.present":
		if e.complexity.Registration.Present == nil {
			break
		}

		return e.complexity.Registration.Present(childComplexity), true

	case "Registration.report":
		if e.complexity.Registration.Report == nil {
			break
		}

		return e.complexity.Registration.Report(childComplexity), true

	case "Registration.subChurch":
		if e.complexity.Registration.SubChurch == nil {
			break
		}

		return e.complexity.Registration.SubChurch(childComplexity), true

	case "Registration.subChurchID":
		if e.complexity.Registration.SubChurchID == nil {
			break
		}

		return e.complexity.Registration.SubChurchID(childComplexity), true

	case "Registration.tempLeaderID":
		if e.complexity.Registration.TempLeaderID == nil {
			break
		}

		return e.complexity.Registration.TempLeaderID(childComplexity), true

	case "RegistrationByCallAgent.callAgent":
		if e.complexity.RegistrationByCallAgent.CallAgent == nil {
			break
		}

		return e.complexity.RegistrationByCallAgent.CallAgent(childComplexity), true

	case "RegistrationByCallAgent.callAgentId":
		if e.complexity.RegistrationByCallAgent.CallAgentID == nil {
			break
		}

		return e.complexity.RegistrationByCallAgent.CallAgentID(childComplexity), true

	case "RegistrationByCallAgent.day":
		if e.complexity.RegistrationByCallAgent.Day == nil {
			break
		}

		return e.complexity.RegistrationByCallAgent.Day(childComplexity), true

	case "RegistrationByCallAgent.id":
		if e.complexity.RegistrationByCallAgent.ID == nil {
			break
		}

		return e.complexity.RegistrationByCallAgent.ID(childComplexity), true

	case "RegistrationsDistribution.leaderID":
		if e.complexity.RegistrationsDistribution.LeaderID == nil {
			break
		}

		return e.complexity.RegistrationsDistribution.LeaderID(childComplexity), true

	case "RegistrationsDistribution.registrationIDs":
		if e.complexity.RegistrationsDistribution.RegistrationIDs == nil {
			break
		}

		return e.complexity.RegistrationsDistribution.RegistrationIDs(childComplexity), true

	case "SubChurch.CallCenter":
		if e.complexity.SubChurch.CallCenter == nil {
			break
		}

		return e.complexity.SubChurch.CallCenter(childComplexity), true

	case "SubChurch.CallCenterID":
		if e.complexity.SubChurch.CallCenterID == nil {
			break
		}

		return e.complexity.SubChurch.CallCenterID(childComplexity), true

	case "SubChurch.church":
		if e.complexity.SubChurch.Church == nil {
			break
		}

		return e.complexity.SubChurch.Church(childComplexity), true

	case "SubChurch.churchId":
		if e.complexity.SubChurch.ChurchID == nil {
			break
		}

		return e.complexity.SubChurch.ChurchID(childComplexity), true

	case "SubChurch.createdAt":
		if e.complexity.SubChurch.CreatedAt == nil {
			break
		}

		return e.complexity.SubChurch.CreatedAt(childComplexity), true

	case "SubChurch.email":
		if e.complexity.SubChurch.Email == nil {
			break
		}

		return e.complexity.SubChurch.Email(childComplexity), true

	case "SubChurch.id":
		if e.complexity.SubChurch.ID == nil {
			break
		}

		return e.complexity.SubChurch.ID(childComplexity), true

	case "SubChurch.isLocal":
		if e.complexity.SubChurch.IsLocal == nil {
			break
		}

		return e.complexity.SubChurch.IsLocal(childComplexity), true

	case "SubChurch.leaders":
		if e.complexity.SubChurch.Leaders == nil {
			break
		}

		return e.complexity.SubChurch.Leaders(childComplexity), true

	case "SubChurch.members":
		if e.complexity.SubChurch.Members == nil {
			break
		}

		return e.complexity.SubChurch.Members(childComplexity), true

	case "SubChurch.name":
		if e.complexity.SubChurch.Name == nil {
			break
		}

		return e.complexity.SubChurch.Name(childComplexity), true

	case "SubChurch.password":
		if e.complexity.SubChurch.Password == nil {
			break
		}

		return e.complexity.SubChurch.Password(childComplexity), true

	case "SubChurch.token":
		if e.complexity.SubChurch.Token == nil {
			break
		}

		return e.complexity.SubChurch.Token(childComplexity), true

	case "SubChurch.types":
		if e.complexity.SubChurch.Types == nil {
			break
		}

		return e.complexity.SubChurch.Types(childComplexity), true

	case "SubChurch.updatedAt":
		if e.complexity.SubChurch.UpdatedAt == nil {
			break
		}

		return e.complexity.SubChurch.UpdatedAt(childComplexity), true

	case "WeeklyResults.date":
		if e.complexity.WeeklyResults.Date == nil {
			break
		}

		return e.complexity.WeeklyResults.Date(childComplexity), true

	case "WeeklyResults.registrations":
		if e.complexity.WeeklyResults.Registrations == nil {
			break
		}

		return e.complexity.WeeklyResults.Registrations(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputChurchMinistryRoleInpt,
		ec.unmarshalInputCreateMemberInput,
		ec.unmarshalInputCreateMemberInputBySub,
		ec.unmarshalInputCreateRegistrationInput,
		ec.unmarshalInputEmergencyContactInput,
		ec.unmarshalInputJobInfoInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputLoginLeaderInput,
		ec.unmarshalInputRegistrationArrayInput,
		ec.unmarshalInputRegistrationArrayInputs,
		ec.unmarshalInputReportRegistrationInput,
		ec.unmarshalInputSubChurchMigrationInput,
		ec.unmarshalInputassignLeaderInput,
		ec.unmarshalInputassignSubLeaderToMemberRegistrationArrayInput,
		ec.unmarshalInputupdateLeaderProfileInput,
		ec.unmarshalInputupdateMemberFamilyInfoInput,
		ec.unmarshalInputupdateMemberInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

//go:embed "schemas/schema.graphqls"
var sourcesFS embed.FS

func sourceData(filename string) string {
	data, err := sourcesFS.ReadFile(filename)
	if err != nil {
		panic(fmt.Sprintf("codegen problem: %s not available", filename))
	}
	return string(data)
}

var sources = []*ast.Source{
	{Name: "schemas/schema.graphqls", Input: sourceData("schemas/schema.graphqls"), BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_CreateCallCenterForSubChurchs_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["subChurchIDs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchIDs"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchIDs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_ReportRegistrationByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ReportRegistrationInput
	if tmp, ok := rawArgs["report"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("report"))
		arg0, err = ec.unmarshalOReportRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReportRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["report"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["registrationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["leaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leaderID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_addAnotherType_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["types"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["types"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_approveSubChurchMigration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["requestId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignLeaderMemberRegisterToAnotherLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["sendToLeaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendToLeaderID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sendToLeaderID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["sendFromLeaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sendFromLeaderID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sendFromLeaderID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AssignLeaderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOassignLeaderInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignLeaderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignMemberToLeaderbySubchurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["leaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leaderID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_assignSubLeaderToMemberRegistrationArray_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.AssignSubLeaderToMemberRegistrationArrayInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOassignSubLeaderToMemberRegistrationArrayInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignSubLeaderToMemberRegistrationArrayInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_assignSubLeaderToMemberRegistration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["callAgentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("callAgentId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["callAgentId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["day"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createMemberBysubLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateMemberInputBySub
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateMemberInputBySub2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateMemberInputBySub(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateMemberInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMemberbySubchurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateMemberInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createMianChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["subChurchName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRegistrationArray_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegistrationArrayInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalORegistrationArrayInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRegistration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg0
	var arg1 model.CreateRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNCreateRegistrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createSubChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["subChurchName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchName"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["branch"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("branch"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["branch"] = arg1
	var arg2 *bool
	if tmp, ok := rawArgs["isLocal"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isLocal"))
		arg2, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isLocal"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_createSubChurchesWithMainChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["mainChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainChurchId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["subChurchNames"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchNames"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchNames"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAllMembersBySubChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["mainChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRegistration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["registrationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSubChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_distributeRegistrationsToLeaders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["leaderIds"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderIds"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leaderIds"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_importMemberData_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["ChurchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ChurchID"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ChurchID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LoginLeaderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLoginLeaderInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLoginLeaderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_memberlogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LoginLeaderInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLoginLeaderInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLoginLeaderInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_rejectSubChurchMigration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["requestId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_requestSubChurchMigration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SubChurchMigrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSubChurchMigrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchMigrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_tempLeadercreateRegistrationArray_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.CreateRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateRegistrationInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["registrationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationID"))
		arg1, err = ec.unmarshalNString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateCallCenter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLeaderProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateLeaderProfileInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateLeaderProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["callCenterId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("callCenterId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["callCenterId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLeaderTypes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["tags"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tags"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLeaderProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateLeaderProfileInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateLeaderProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMemberEmergencyContact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.EmergencyContactInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNEmergencyContactInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐEmergencyContactInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMemberFamilyInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMemberFamilyInfoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateMemberFamilyInfoInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateMemberFamilyInfoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMemberJobInfoInput_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.JobInfoInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNJobInfoInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfoInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateMemberInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateMemberInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateMemberInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMinistryRoleByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChurchMinistryRoleInpt
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNChurchMinistryRoleInpt2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRoleInpt(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRegistrationArray_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.RegistrationArrayInputs
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRegistrationArrayInputs2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInputs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRegistrationByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateRegistrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["registrationID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["leaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leaderID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRegistration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateRegistrationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateRegistrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["registrationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatesubChurch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateLeaderProfileInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNupdateLeaderProfileInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateLeaderProfileInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_CallRoom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllMemberBySubLeaderToLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["day"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetAllMembersByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["leaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["leaderID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllMembersBySubChurchIDForCallAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllMembersBySubChurchID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllRegistersByMemberID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["MemberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("MemberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["MemberId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllRegistersByTempLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["tempLeaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tempLeaderID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tempLeaderID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllSubChurchByCallCenter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["CallCenterId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CallCenterId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["CallCenterId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllSubChurchLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllSubLeaderByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchID"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["day"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_GetAllmembersByDaysForCallAgent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["CallAgentId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("CallAgentId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["CallAgentId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllsubChurchByMainChurchID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["mainChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mainChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mainChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAllsubChurchByMemberId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetMigration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetMigrationdestinationID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["destinationChurchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationChurchID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["destinationChurchID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetNoteficationByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchID"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["day"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["day"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_Getmember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetsubChurchByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_LastFourCommentsForMember_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["memberID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberID"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_MembersBySubChurchID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_currentWeekRegistrationsforsub_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subChurchId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subChurchId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subChurchId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_registrationsByLeader_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["mleaderID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mleaderID"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["mleaderID"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _CallCenter_ID(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_ID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.CallCenter().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_ID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_Name(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_Name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_Name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_Password(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_Password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_Password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_Email(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_Email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_Email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_Types(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_Types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_Types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_Token(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_Token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_Token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_UpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_UpdatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_UpdatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_CreatedAt(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_CreatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_CreatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _CallCenter_SubChurches(ctx context.Context, field graphql.CollectedField, obj *model.CallCenter) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_CallCenter_SubChurches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_CallCenter_SubChurches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "CallCenter",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_id(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Church().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_name(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_password(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_email(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_types(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_token(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Church_subChurches(ctx context.Context, field graphql.CollectedField, obj *model.Church) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Church_subChurches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalNSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Church_subChurches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Church",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChurchMinistryRole_id(ctx context.Context, field graphql.CollectedField, obj *model.ChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChurchMinistryRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.ChurchMinistryRole().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChurchMinistryRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChurchMinistryRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChurchMinistryRole_role(ctx context.Context, field graphql.CollectedField, obj *model.ChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChurchMinistryRole_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ChurchMinistryRolesEnum)
	fc.Result = res
	return ec.marshalOChurchMinistryRolesEnum2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRolesEnum(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChurchMinistryRole_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChurchMinistryRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ChurchMinistryRolesEnum does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateInfo_month(ctx context.Context, field graphql.CollectedField, obj *model.DateInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateInfo_month(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Month, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateInfo_month(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DateInfo_weekOfMonth(ctx context.Context, field graphql.CollectedField, obj *model.DateInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DateInfo_weekOfMonth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WeekOfMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DateInfo_weekOfMonth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DateInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_id(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.EmergencyContact().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_name(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_relation(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_relation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_relation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _EmergencyContact_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.EmergencyContact) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_EmergencyContact_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_EmergencyContact_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "EmergencyContact",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.FamilyInfo().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_lastName(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_lastName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_lastName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_spouseId(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_spouseId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpouseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_spouseId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_dateOfBirth(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_dateOfBirth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateOfBirth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_dateOfBirth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_member(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_member(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_member(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_memberID(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_memberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_memberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_spouse(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_spouse(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Spouse, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_spouse(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_spouseNameNotVbci(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_spouseNameNotVbci(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpouseNameNotVbci, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_spouseNameNotVbci(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_spousePhoneNumberNotVbci(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_spousePhoneNumberNotVbci(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpousePhoneNumberNotVbci, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_spousePhoneNumberNotVbci(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_children(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_children(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Children, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_children(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_relationship(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_relationship(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Relationship, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_relationship(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_nextOfKin(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_nextOfKin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NextOfKin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_nextOfKin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_occupation(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_occupation(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Occupation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.JobInfo)
	fc.Result = res
	return ec.marshalOJobInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_occupation(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobInfo_id(ctx, field)
			case "position":
				return ec.fieldContext_JobInfo_position(ctx, field)
			case "typeOfWork":
				return ec.fieldContext_JobInfo_typeOfWork(ctx, field)
			case "company":
				return ec.fieldContext_JobInfo_company(ctx, field)
			case "workExperience":
				return ec.fieldContext_JobInfo_workExperience(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobInfo_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobInfo_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_occupationId(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_occupationId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OccupationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_occupationId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_education(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_education(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Education, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_education(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_emergencyContact(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_emergencyContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmergencyContact, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EmergencyContact)
	fc.Result = res
	return ec.marshalOEmergencyContact2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐEmergencyContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_emergencyContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EmergencyContact_id(ctx, field)
			case "name":
				return ec.fieldContext_EmergencyContact_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_EmergencyContact_phoneNumber(ctx, field)
			case "relation":
				return ec.fieldContext_EmergencyContact_relation(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EmergencyContact_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_EmergencyContact_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmergencyContact", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_emergencyContactId(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_emergencyContactId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EmergencyContactID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_emergencyContactId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FamilyInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.FamilyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FamilyInfo_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FamilyInfo_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FamilyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_id(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Finance().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_name(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_password(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_email(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_types(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_token(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Finance_subChurches(ctx context.Context, field graphql.CollectedField, obj *model.Finance) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Finance_subChurches(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalNSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Finance_subChurches(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Finance",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.JobInfo().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_position(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_typeOfWork(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_typeOfWork(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeOfWork, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_typeOfWork(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_company(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_company(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Company, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_company(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_workExperience(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_workExperience(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkExperience, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_workExperience(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _JobInfo_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.JobInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_JobInfo_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_JobInfo_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "JobInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeaderRegistrationsDistribution_leaderID(ctx context.Context, field graphql.CollectedField, obj *model.LeaderRegistrationsDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeaderRegistrationsDistribution_leaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeaderRegistrationsDistribution_leaderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeaderRegistrationsDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LeaderRegistrationsDistribution_registrationIDs(ctx context.Context, field graphql.CollectedField, obj *model.LeaderRegistrationsDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LeaderRegistrationsDistribution_registrationIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationIDs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LeaderRegistrationsDistribution_registrationIDs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LeaderRegistrationsDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_id(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Member().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_name(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_email(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_phoneNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_phoneNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_location(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_location(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_location(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_day(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Day, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_day(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_password(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_pwood(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_pwood(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pwood, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_pwood(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_types(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Member().Types(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_token(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_leader(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_leader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_LeaderID(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_LeaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_LeaderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_ReferenceIDCount(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_ReferenceIDCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceIDCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_ReferenceIDCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_registrations(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_registrations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registrations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_registrations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_subChurch(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_subChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_subChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_subChurchID(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_subChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_subChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_personalInfor(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_personalInfor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalInfor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.FamilyInfo)
	fc.Result = res
	return ec.marshalOFamilyInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐFamilyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_personalInfor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FamilyInfo_id(ctx, field)
			case "lastName":
				return ec.fieldContext_FamilyInfo_lastName(ctx, field)
			case "spouseId":
				return ec.fieldContext_FamilyInfo_spouseId(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_FamilyInfo_dateOfBirth(ctx, field)
			case "member":
				return ec.fieldContext_FamilyInfo_member(ctx, field)
			case "memberID":
				return ec.fieldContext_FamilyInfo_memberID(ctx, field)
			case "spouse":
				return ec.fieldContext_FamilyInfo_spouse(ctx, field)
			case "spouseNameNotVbci":
				return ec.fieldContext_FamilyInfo_spouseNameNotVbci(ctx, field)
			case "spousePhoneNumberNotVbci":
				return ec.fieldContext_FamilyInfo_spousePhoneNumberNotVbci(ctx, field)
			case "children":
				return ec.fieldContext_FamilyInfo_children(ctx, field)
			case "relationship":
				return ec.fieldContext_FamilyInfo_relationship(ctx, field)
			case "nextOfKin":
				return ec.fieldContext_FamilyInfo_nextOfKin(ctx, field)
			case "occupation":
				return ec.fieldContext_FamilyInfo_occupation(ctx, field)
			case "occupationId":
				return ec.fieldContext_FamilyInfo_occupationId(ctx, field)
			case "education":
				return ec.fieldContext_FamilyInfo_education(ctx, field)
			case "emergencyContact":
				return ec.fieldContext_FamilyInfo_emergencyContact(ctx, field)
			case "emergencyContactId":
				return ec.fieldContext_FamilyInfo_emergencyContactId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FamilyInfo_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_FamilyInfo_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FamilyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_churchMinistries(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_churchMinistries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchMinistries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MemberChurchMinistryRole)
	fc.Result = res
	return ec.marshalOMemberChurchMinistryRole2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberChurchMinistryRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_churchMinistries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemberChurchMinistryRole_id(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberChurchMinistryRole_memberID(ctx, field)
			case "churchMinistryRoleID":
				return ec.fieldContext_MemberChurchMinistryRole_churchMinistryRoleID(ctx, field)
			case "ChurchMinistryRole":
				return ec.fieldContext_MemberChurchMinistryRole_ChurchMinistryRole(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberChurchMinistryRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_personalInforId(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_personalInforId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PersonalInforID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_personalInforId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Member_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Member) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Member_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Member_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Member",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChildren_id(ctx context.Context, field graphql.CollectedField, obj *model.MemberChildren) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChildren_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MemberChildren().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChildren_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChildren",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChildren_ParentID(ctx context.Context, field graphql.CollectedField, obj *model.MemberChildren) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChildren_ParentID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChildren_ParentID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChildren",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChildren_childrenId(ctx context.Context, field graphql.CollectedField, obj *model.MemberChildren) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChildren_childrenId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChildrenID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChildren_childrenId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChildren",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChurchMinistryRole_id(ctx context.Context, field graphql.CollectedField, obj *model.MemberChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChurchMinistryRole_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MemberChurchMinistryRole().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChurchMinistryRole_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChurchMinistryRole",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChurchMinistryRole_memberID(ctx context.Context, field graphql.CollectedField, obj *model.MemberChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChurchMinistryRole_memberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChurchMinistryRole_memberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChurchMinistryRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChurchMinistryRole_churchMinistryRoleID(ctx context.Context, field graphql.CollectedField, obj *model.MemberChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChurchMinistryRole_churchMinistryRoleID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchMinistryRoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChurchMinistryRole_churchMinistryRoleID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChurchMinistryRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MemberChurchMinistryRole_ChurchMinistryRole(ctx context.Context, field graphql.CollectedField, obj *model.MemberChurchMinistryRole) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MemberChurchMinistryRole_ChurchMinistryRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchMinistryRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ChurchMinistryRole)
	fc.Result = res
	return ec.marshalOChurchMinistryRole2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MemberChurchMinistryRole_ChurchMinistryRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MemberChurchMinistryRole",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ChurchMinistryRole_id(ctx, field)
			case "role":
				return ec.fieldContext_ChurchMinistryRole_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChurchMinistryRole", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_id(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.MigrationRequest().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_locationFrom(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationFrom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_locationFrom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_locationEnd(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationEnd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_locationEnd(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_memberID(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_memberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_memberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_MemberName(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_MemberName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_MemberName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_destinationChurchID(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DestinationChurchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_destinationChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_statusID(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_statusID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_statusID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MigrationRequest_status(ctx context.Context, field graphql.CollectedField, obj *model.MigrationRequest) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MigrationRequest_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MigrationStatus)
	fc.Result = res
	return ec.marshalOMigrationStatus2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MigrationRequest_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MigrationRequest",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type MigrationStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_requestSubChurchMigration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_requestSubChurchMigration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestSubChurchMigration(rctx, fc.Args["input"].(model.SubChurchMigrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MigrationRequest)
	fc.Result = res
	return ec.marshalNMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_requestSubChurchMigration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MigrationRequest_id(ctx, field)
			case "locationFrom":
				return ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
			case "locationEnd":
				return ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_MigrationRequest_createdAt(ctx, field)
			case "memberID":
				return ec.fieldContext_MigrationRequest_memberID(ctx, field)
			case "MemberName":
				return ec.fieldContext_MigrationRequest_MemberName(ctx, field)
			case "destinationChurchID":
				return ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
			case "statusID":
				return ec.fieldContext_MigrationRequest_statusID(ctx, field)
			case "status":
				return ec.fieldContext_MigrationRequest_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MigrationRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_requestSubChurchMigration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_approveSubChurchMigration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_approveSubChurchMigration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ApproveSubChurchMigration(rctx, fc.Args["requestId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MigrationRequest)
	fc.Result = res
	return ec.marshalNMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_approveSubChurchMigration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MigrationRequest_id(ctx, field)
			case "locationFrom":
				return ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
			case "locationEnd":
				return ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_MigrationRequest_createdAt(ctx, field)
			case "memberID":
				return ec.fieldContext_MigrationRequest_memberID(ctx, field)
			case "MemberName":
				return ec.fieldContext_MigrationRequest_MemberName(ctx, field)
			case "destinationChurchID":
				return ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
			case "statusID":
				return ec.fieldContext_MigrationRequest_statusID(ctx, field)
			case "status":
				return ec.fieldContext_MigrationRequest_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MigrationRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_approveSubChurchMigration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rejectSubChurchMigration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rejectSubChurchMigration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RejectSubChurchMigration(rctx, fc.Args["requestId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.MigrationRequest)
	fc.Result = res
	return ec.marshalNMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rejectSubChurchMigration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MigrationRequest_id(ctx, field)
			case "locationFrom":
				return ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
			case "locationEnd":
				return ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_MigrationRequest_createdAt(ctx, field)
			case "memberID":
				return ec.fieldContext_MigrationRequest_memberID(ctx, field)
			case "MemberName":
				return ec.fieldContext_MigrationRequest_MemberName(ctx, field)
			case "destinationChurchID":
				return ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
			case "statusID":
				return ec.fieldContext_MigrationRequest_statusID(ctx, field)
			case "status":
				return ec.fieldContext_MigrationRequest_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MigrationRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rejectSubChurchMigration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMember(rctx, fc.Args["input"].(*model.CreateMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMemberbySubchurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMemberbySubchurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMemberbySubchurch(rctx, fc.Args["input"].(*model.CreateMemberInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMemberbySubchurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMemberbySubchurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_importMemberData(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_importMemberData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ImportMemberData(rctx, fc.Args["file"].(graphql.Upload), fc.Args["ChurchID"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_importMemberData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_importMemberData_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_dataMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_dataMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DataMembers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_dataMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_cleanUpPhoneNumbers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_cleanUpPhoneNumbers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CleanUpPhoneNumbers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_cleanUpPhoneNumbers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMemberBysubLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMemberBysubLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMemberBysubLeader(rctx, fc.Args["input"].(*model.CreateMemberInputBySub))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMemberBysubLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMemberBysubLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMember(rctx, fc.Args["input"].(model.UpdateMemberInput), fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMemberFamilyInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMemberFamilyInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMemberFamilyInfo(rctx, fc.Args["input"].(model.UpdateMemberFamilyInfoInput), fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.FamilyInfo)
	fc.Result = res
	return ec.marshalNFamilyInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐFamilyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMemberFamilyInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_FamilyInfo_id(ctx, field)
			case "lastName":
				return ec.fieldContext_FamilyInfo_lastName(ctx, field)
			case "spouseId":
				return ec.fieldContext_FamilyInfo_spouseId(ctx, field)
			case "dateOfBirth":
				return ec.fieldContext_FamilyInfo_dateOfBirth(ctx, field)
			case "member":
				return ec.fieldContext_FamilyInfo_member(ctx, field)
			case "memberID":
				return ec.fieldContext_FamilyInfo_memberID(ctx, field)
			case "spouse":
				return ec.fieldContext_FamilyInfo_spouse(ctx, field)
			case "spouseNameNotVbci":
				return ec.fieldContext_FamilyInfo_spouseNameNotVbci(ctx, field)
			case "spousePhoneNumberNotVbci":
				return ec.fieldContext_FamilyInfo_spousePhoneNumberNotVbci(ctx, field)
			case "children":
				return ec.fieldContext_FamilyInfo_children(ctx, field)
			case "relationship":
				return ec.fieldContext_FamilyInfo_relationship(ctx, field)
			case "nextOfKin":
				return ec.fieldContext_FamilyInfo_nextOfKin(ctx, field)
			case "occupation":
				return ec.fieldContext_FamilyInfo_occupation(ctx, field)
			case "occupationId":
				return ec.fieldContext_FamilyInfo_occupationId(ctx, field)
			case "education":
				return ec.fieldContext_FamilyInfo_education(ctx, field)
			case "emergencyContact":
				return ec.fieldContext_FamilyInfo_emergencyContact(ctx, field)
			case "emergencyContactId":
				return ec.fieldContext_FamilyInfo_emergencyContactId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_FamilyInfo_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_FamilyInfo_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FamilyInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMemberFamilyInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMemberEmergencyContact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMemberEmergencyContact(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMemberEmergencyContact(rctx, fc.Args["input"].(model.EmergencyContactInput), fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EmergencyContact)
	fc.Result = res
	return ec.marshalOEmergencyContact2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐEmergencyContact(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMemberEmergencyContact(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_EmergencyContact_id(ctx, field)
			case "name":
				return ec.fieldContext_EmergencyContact_name(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_EmergencyContact_phoneNumber(ctx, field)
			case "relation":
				return ec.fieldContext_EmergencyContact_relation(ctx, field)
			case "updatedAt":
				return ec.fieldContext_EmergencyContact_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_EmergencyContact_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type EmergencyContact", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMemberEmergencyContact_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMemberJobInfoInput(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMemberJobInfoInput(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMemberJobInfoInput(rctx, fc.Args["input"].(model.JobInfoInput), fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.JobInfo)
	fc.Result = res
	return ec.marshalNJobInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMemberJobInfoInput(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_JobInfo_id(ctx, field)
			case "position":
				return ec.fieldContext_JobInfo_position(ctx, field)
			case "typeOfWork":
				return ec.fieldContext_JobInfo_typeOfWork(ctx, field)
			case "company":
				return ec.fieldContext_JobInfo_company(ctx, field)
			case "workExperience":
				return ec.fieldContext_JobInfo_workExperience(ctx, field)
			case "updatedAt":
				return ec.fieldContext_JobInfo_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_JobInfo_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type JobInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMemberJobInfoInput_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateMinistryRoleByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateMinistryRoleByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMinistryRoleByLeader(rctx, fc.Args["input"].(model.ChurchMinistryRoleInpt), fc.Args["memberID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MemberChurchMinistryRole)
	fc.Result = res
	return ec.marshalOMemberChurchMinistryRole2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberChurchMinistryRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateMinistryRoleByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MemberChurchMinistryRole_id(ctx, field)
			case "memberID":
				return ec.fieldContext_MemberChurchMinistryRole_memberID(ctx, field)
			case "churchMinistryRoleID":
				return ec.fieldContext_MemberChurchMinistryRole_churchMinistryRoleID(ctx, field)
			case "ChurchMinistryRole":
				return ec.fieldContext_MemberChurchMinistryRole_ChurchMinistryRole(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MemberChurchMinistryRole", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateMinistryRoleByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLeader(rctx, fc.Args["input"].(model.UpdateLeaderProfileInput), fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updatesubChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updatesubChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatesubChurch(rctx, fc.Args["input"].(model.UpdateLeaderProfileInput), fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SubChurch)
	fc.Result = res
	return ec.marshalNSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updatesubChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updatesubChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateCallCenter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateCallCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateCallCenter(rctx, fc.Args["input"].(model.UpdateLeaderProfileInput), fc.Args["callCenterId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CallCenter)
	fc.Result = res
	return ec.marshalNCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateCallCenter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CallCenter_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CallCenter_Name(ctx, field)
			case "Password":
				return ec.fieldContext_CallCenter_Password(ctx, field)
			case "Email":
				return ec.fieldContext_CallCenter_Email(ctx, field)
			case "Types":
				return ec.fieldContext_CallCenter_Types(ctx, field)
			case "Token":
				return ec.fieldContext_CallCenter_Token(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_CallCenter_UpdatedAt(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_CallCenter_CreatedAt(ctx, field)
			case "SubChurches":
				return ec.fieldContext_CallCenter_SubChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CallCenter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateCallCenter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateChurch(rctx, fc.Args["name"].(string), fc.Args["email"].(string), fc.Args["password"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Church)
	fc.Result = res
	return ec.marshalNChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteChurch(rctx, fc.Args["mainChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMember(rctx, fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteSubChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteSubChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSubChurch(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteSubChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteSubChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAllMembersBySubChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAllMembersBySubChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAllMembersBySubChurch(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAllMembersBySubChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteAllMembersBySubChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRegistration(rctx, fc.Args["registrationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteRegistration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSubChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSubChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSubChurch(rctx, fc.Args["subChurchName"].(*string), fc.Args["branch"].(bool), fc.Args["isLocal"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Church)
	fc.Result = res
	return ec.marshalNChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSubChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSubChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createMianChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createMianChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateMianChurch(rctx, fc.Args["subChurchName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Church)
	fc.Result = res
	return ec.marshalNChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createMianChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createMianChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignLeader(rctx, fc.Args["input"].(*model.AssignLeaderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_addAnotherType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_addAnotherType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddAnotherType(rctx, fc.Args["memberId"].(string), fc.Args["types"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_addAnotherType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_addAnotherType_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateLeaderTypes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateLeaderTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLeaderTypes(rctx, fc.Args["id"].(*string), fc.Args["tags"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateLeaderTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateLeaderTypes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignMemberToLeaderbySubchurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignMemberToLeaderbySubchurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignMemberToLeaderbySubchurch(rctx, fc.Args["leaderID"].(string), fc.Args["memberID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignMemberToLeaderbySubchurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignMemberToLeaderbySubchurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignLeaderMemberRegisterToAnotherLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignLeaderMemberRegisterToAnotherLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignLeaderMemberRegisterToAnotherLeader(rctx, fc.Args["sendToLeaderID"].(string), fc.Args["sendFromLeaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignLeaderMemberRegisterToAnotherLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignLeaderMemberRegisterToAnotherLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignSubLeaderToMemberRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignSubLeaderToMemberRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignSubLeaderToMemberRegistration(rctx, fc.Args["callAgentId"].(string), fc.Args["day"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RegistrationByCallAgent)
	fc.Result = res
	return ec.marshalNRegistrationByCallAgent2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationByCallAgent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignSubLeaderToMemberRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RegistrationByCallAgent_id(ctx, field)
			case "callAgentId":
				return ec.fieldContext_RegistrationByCallAgent_callAgentId(ctx, field)
			case "callAgent":
				return ec.fieldContext_RegistrationByCallAgent_callAgent(ctx, field)
			case "day":
				return ec.fieldContext_RegistrationByCallAgent_day(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegistrationByCallAgent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignSubLeaderToMemberRegistration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_assignSubLeaderToMemberRegistrationArray(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_assignSubLeaderToMemberRegistrationArray(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AssignSubLeaderToMemberRegistrationArray(rctx, fc.Args["input"].([]*model.AssignSubLeaderToMemberRegistrationArrayInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RegistrationByCallAgent)
	fc.Result = res
	return ec.marshalNRegistrationByCallAgent2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationByCallAgent(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_assignSubLeaderToMemberRegistrationArray(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RegistrationByCallAgent_id(ctx, field)
			case "callAgentId":
				return ec.fieldContext_RegistrationByCallAgent_callAgentId(ctx, field)
			case "callAgent":
				return ec.fieldContext_RegistrationByCallAgent_callAgent(ctx, field)
			case "day":
				return ec.fieldContext_RegistrationByCallAgent_day(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RegistrationByCallAgent", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_assignSubLeaderToMemberRegistrationArray_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteAssignSubLeaderToMemberRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteAssignSubLeaderToMemberRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAssignSubLeaderToMemberRegistration(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteAssignSubLeaderToMemberRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_tempLeadercreateRegistrationArray(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_tempLeadercreateRegistrationArray(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TempLeadercreateRegistrationArray(rctx, fc.Args["input"].([]*model.CreateRegistrationInput), fc.Args["registrationID"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_tempLeadercreateRegistrationArray(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_tempLeadercreateRegistrationArray_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRegistrationArray(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRegistrationArray(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegistrationArray(rctx, fc.Args["input"].([]*model.RegistrationArrayInputs))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRegistrationArray(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRegistrationArray_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveLeader(rctx, fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSubChurchesWithMainChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSubChurchesWithMainChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSubChurchesWithMainChurch(rctx, fc.Args["mainChurchId"].(string), fc.Args["subChurchNames"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Church)
	fc.Result = res
	return ec.marshalNChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSubChurchesWithMainChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSubChurchesWithMainChurch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRegistration(rctx, fc.Args["memberId"].(string), fc.Args["input"].(model.CreateRegistrationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRegistration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createRegistrationArray(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createRegistrationArray(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRegistrationArray(rctx, fc.Args["input"].([]*model.RegistrationArrayInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createRegistrationArray(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createRegistrationArray_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegistration(rctx, fc.Args["input"].(model.CreateRegistrationInput), fc.Args["registrationId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRegistration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateRegistrationByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateRegistrationByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegistrationByLeader(rctx, fc.Args["input"].(model.CreateRegistrationInput), fc.Args["registrationID"].(string), fc.Args["leaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateRegistrationByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateRegistrationByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_CreateCallCenterForSubChurchs(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_CreateCallCenterForSubChurchs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateCallCenterForSubChurchs(rctx, fc.Args["name"].(string), fc.Args["subChurchIDs"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CallCenter)
	fc.Result = res
	return ec.marshalOCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_CreateCallCenterForSubChurchs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CallCenter_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CallCenter_Name(ctx, field)
			case "Password":
				return ec.fieldContext_CallCenter_Password(ctx, field)
			case "Email":
				return ec.fieldContext_CallCenter_Email(ctx, field)
			case "Types":
				return ec.fieldContext_CallCenter_Types(ctx, field)
			case "Token":
				return ec.fieldContext_CallCenter_Token(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_CallCenter_UpdatedAt(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_CallCenter_CreatedAt(ctx, field)
			case "SubChurches":
				return ec.fieldContext_CallCenter_SubChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CallCenter", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_CreateCallCenterForSubChurchs_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_distributeRegistrationsToLeaders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_distributeRegistrationsToLeaders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DistributeRegistrationsToLeaders(rctx, fc.Args["leaderIds"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LeaderRegistrationsDistribution)
	fc.Result = res
	return ec.marshalOLeaderRegistrationsDistribution2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLeaderRegistrationsDistribution(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_distributeRegistrationsToLeaders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "leaderID":
				return ec.fieldContext_LeaderRegistrationsDistribution_leaderID(ctx, field)
			case "registrationIDs":
				return ec.fieldContext_LeaderRegistrationsDistribution_registrationIDs(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LeaderRegistrationsDistribution", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_distributeRegistrationsToLeaders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ReportRegistrationByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ReportRegistrationByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReportRegistrationByLeader(rctx, fc.Args["report"].(*model.ReportRegistrationInput), fc.Args["registrationID"].(string), fc.Args["leaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ReportRegistrationByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_ReportRegistrationByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_login(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, fc.Args["input"].(model.LoginLeaderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(model.Returns)
	fc.Result = res
	return ec.marshalOReturns2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReturns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_login(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Returns does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_login_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_memberlogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_memberlogin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Memberlogin(rctx, fc.Args["input"].(model.LoginLeaderInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.Returns)
	fc.Result = res
	return ec.marshalNReturns2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReturns(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_memberlogin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Returns does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_memberlogin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_logOut(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_logOut(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().LogOut(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_logOut(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllMainChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllMainChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllMainChurch(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Church)
	fc.Result = res
	return ec.marshalOChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllMainChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllsubChurchByMainChurchID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllsubChurchByMainChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllsubChurchByMainChurchID(rctx, fc.Args["mainChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllsubChurchByMainChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllsubChurchByMainChurchID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllsubChurchByMemberId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllsubChurchByMemberId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllsubChurchByMemberID(rctx, fc.Args["memberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllsubChurchByMemberId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllsubChurchByMemberId_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllMembersBySubChurchID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllMembersBySubChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllMembersBySubChurchID(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllMembersBySubChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllMembersBySubChurchID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllMembersBySubChurchIDForCallAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllMembersBySubChurchIDForCallAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllMembersBySubChurchIDForCallAgent(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllMembersBySubChurchIDForCallAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllMembersBySubChurchIDForCallAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllSubChurchLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllSubChurchLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllSubChurchLeader(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllSubChurchLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllSubChurchLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllMembersByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllMembersByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllMembersByLeader(rctx, fc.Args["leaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllMembersByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllMembersByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllSubLeaderByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllSubLeaderByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllSubLeaderByLeader(rctx, fc.Args["subChurchID"].(string), fc.Args["day"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllSubLeaderByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllSubLeaderByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllMemberBySubLeaderToLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllMemberBySubLeaderToLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllMemberBySubLeaderToLeader(rctx, fc.Args["subChurchID"].(string), fc.Args["day"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllMemberBySubLeaderToLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllMemberBySubLeaderToLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetNoteficationByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetNoteficationByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetNoteficationByLeader(rctx, fc.Args["subChurchID"].(string), fc.Args["day"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetNoteficationByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetNoteficationByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllRegistersByMemberID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllRegistersByMemberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllRegistersByMemberID(rctx, fc.Args["MemberId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllRegistersByMemberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllRegistersByMemberID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllmembersByDaysForCallAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllmembersByDaysForCallAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllmembersByDaysForCallAgent(rctx, fc.Args["CallAgentId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllmembersByDaysForCallAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllmembersByDaysForCallAgent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllDaysFormassignCallAgentToMemberRegistration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllDaysFormassignCallAgentToMemberRegistration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllDaysFormassignCallAgentToMemberRegistration(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllDaysFormassignCallAgentToMemberRegistration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_LastFourCommentsForMember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_LastFourCommentsForMember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LastFourCommentsForMember(rctx, fc.Args["memberID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_LastFourCommentsForMember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_LastFourCommentsForMember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllsubChurch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllsubChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllsubChurch(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllsubChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCallCenter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCallCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCallCenter(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CallCenter)
	fc.Result = res
	return ec.marshalOCallCenter2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCallCenter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CallCenter_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CallCenter_Name(ctx, field)
			case "Password":
				return ec.fieldContext_CallCenter_Password(ctx, field)
			case "Email":
				return ec.fieldContext_CallCenter_Email(ctx, field)
			case "Types":
				return ec.fieldContext_CallCenter_Types(ctx, field)
			case "Token":
				return ec.fieldContext_CallCenter_Token(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_CallCenter_UpdatedAt(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_CallCenter_CreatedAt(ctx, field)
			case "SubChurches":
				return ec.fieldContext_CallCenter_SubChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CallCenter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllSubChurchByCallCenter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllSubChurchByCallCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllSubChurchByCallCenter(rctx, fc.Args["CallCenterId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalNSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllSubChurchByCallCenter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllSubChurchByCallCenter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCaller(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCaller(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCaller(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCaller(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetCallAgent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetCallAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCallAgent(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetCallAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_Getmember(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Getmember(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getmember(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Getmember(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_Getmember_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetMigration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetMigration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMigration(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MigrationRequest)
	fc.Result = res
	return ec.marshalOMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetMigration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MigrationRequest_id(ctx, field)
			case "locationFrom":
				return ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
			case "locationEnd":
				return ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_MigrationRequest_createdAt(ctx, field)
			case "memberID":
				return ec.fieldContext_MigrationRequest_memberID(ctx, field)
			case "MemberName":
				return ec.fieldContext_MigrationRequest_MemberName(ctx, field)
			case "destinationChurchID":
				return ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
			case "statusID":
				return ec.fieldContext_MigrationRequest_statusID(ctx, field)
			case "status":
				return ec.fieldContext_MigrationRequest_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MigrationRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetMigration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetMigrationdestinationID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetMigrationdestinationID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetMigrationdestinationID(rctx, fc.Args["destinationChurchID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.MigrationRequest)
	fc.Result = res
	return ec.marshalOMigrationRequest2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetMigrationdestinationID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_MigrationRequest_id(ctx, field)
			case "locationFrom":
				return ec.fieldContext_MigrationRequest_locationFrom(ctx, field)
			case "locationEnd":
				return ec.fieldContext_MigrationRequest_locationEnd(ctx, field)
			case "createdAt":
				return ec.fieldContext_MigrationRequest_createdAt(ctx, field)
			case "memberID":
				return ec.fieldContext_MigrationRequest_memberID(ctx, field)
			case "MemberName":
				return ec.fieldContext_MigrationRequest_MemberName(ctx, field)
			case "destinationChurchID":
				return ec.fieldContext_MigrationRequest_destinationChurchID(ctx, field)
			case "statusID":
				return ec.fieldContext_MigrationRequest_statusID(ctx, field)
			case "status":
				return ec.fieldContext_MigrationRequest_status(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MigrationRequest", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetMigrationdestinationID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_Getmembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_Getmembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getmembers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_Getmembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_todaysMembers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_todaysMembers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TodaysMembers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_todaysMembers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetsubChurchByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetsubChurchByID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetsubChurchByID(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetsubChurchByID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetsubChurchByID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_MembersBySubChurchID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_MembersBySubChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MembersBySubChurchID(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalNMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_MembersBySubChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_MembersBySubChurchID_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_registrationsByLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_registrationsByLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RegistrationsByLeader(rctx, fc.Args["mleaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_registrationsByLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_registrationsByLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_CallRoom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_CallRoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CallRoom(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_CallRoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_CallRoom_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_GetAllRegistersByTempLeader(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_GetAllRegistersByTempLeader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllRegistersByTempLeader(rctx, fc.Args["tempLeaderID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_GetAllRegistersByTempLeader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_GetAllRegistersByTempLeader_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentWeekRegistrations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentWeekRegistrations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentWeekRegistrations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentWeekRegistrations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentWeekRegistrationsforsub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentWeekRegistrationsforsub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentWeekRegistrationsforsub(rctx, fc.Args["subChurchId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentWeekRegistrationsforsub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_currentWeekRegistrationsforsub_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query_currentWeekRegistrationsforCallCenter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_currentWeekRegistrationsforCallCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentWeekRegistrationsforCallCenter(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SubChurch)
	fc.Result = res
	return ec.marshalNSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_currentWeekRegistrationsforCallCenter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_WeekRegistrationsforSub(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_WeekRegistrationsforSub(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().WeekRegistrationsforSub(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_WeekRegistrationsforSub(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_id(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Registration().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_lastComment(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_lastComment(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastComment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_lastComment(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_absence(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_absence(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Absence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_absence(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_present(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_present(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Present, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_present(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_report(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_report(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Report, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_report(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_done(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_done(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Done, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_done(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_leaderName(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_leaderName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_leaderName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_memberName(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_memberName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_memberName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_leader(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_leader(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leader, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_leader(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_leaderID(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_leaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_leaderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_member(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_member(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Member, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_member(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_subChurch(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_subChurch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SubChurch)
	fc.Result = res
	return ec.marshalOSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_subChurch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SubChurch_id(ctx, field)
			case "name":
				return ec.fieldContext_SubChurch_name(ctx, field)
			case "password":
				return ec.fieldContext_SubChurch_password(ctx, field)
			case "email":
				return ec.fieldContext_SubChurch_email(ctx, field)
			case "types":
				return ec.fieldContext_SubChurch_types(ctx, field)
			case "token":
				return ec.fieldContext_SubChurch_token(ctx, field)
			case "updatedAt":
				return ec.fieldContext_SubChurch_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_SubChurch_createdAt(ctx, field)
			case "church":
				return ec.fieldContext_SubChurch_church(ctx, field)
			case "churchId":
				return ec.fieldContext_SubChurch_churchId(ctx, field)
			case "isLocal":
				return ec.fieldContext_SubChurch_isLocal(ctx, field)
			case "leaders":
				return ec.fieldContext_SubChurch_leaders(ctx, field)
			case "members":
				return ec.fieldContext_SubChurch_members(ctx, field)
			case "CallCenterID":
				return ec.fieldContext_SubChurch_CallCenterID(ctx, field)
			case "CallCenter":
				return ec.fieldContext_SubChurch_CallCenter(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SubChurch", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_subChurchID(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_subChurchID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubChurchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_subChurchID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_tempLeaderID(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_tempLeaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TempLeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_tempLeaderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Registration_memberID(ctx context.Context, field graphql.CollectedField, obj *model.Registration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Registration_memberID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemberID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Registration_memberID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Registration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationByCallAgent_id(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationByCallAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationByCallAgent_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RegistrationByCallAgent().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationByCallAgent_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationByCallAgent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationByCallAgent_callAgentId(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationByCallAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationByCallAgent_callAgentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CallAgentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationByCallAgent_callAgentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationByCallAgent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationByCallAgent_callAgent(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationByCallAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationByCallAgent_callAgent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CallAgent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationByCallAgent_callAgent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationByCallAgent",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationByCallAgent_day(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationByCallAgent) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationByCallAgent_day(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.RegistrationByCallAgent().Day(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationByCallAgent_day(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationByCallAgent",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationsDistribution_leaderID(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationsDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationsDistribution_leaderID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LeaderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationsDistribution_leaderID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationsDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RegistrationsDistribution_registrationIDs(ctx context.Context, field graphql.CollectedField, obj *model.RegistrationsDistribution) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RegistrationsDistribution_registrationIDs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationIDs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RegistrationsDistribution_registrationIDs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RegistrationsDistribution",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_id(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.SubChurch().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_name(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_password(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_email(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_types(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_token(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_token(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_updatedAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_updatedAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_church(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_church(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Church, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Church)
	fc.Result = res
	return ec.marshalOChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_church(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Church_id(ctx, field)
			case "name":
				return ec.fieldContext_Church_name(ctx, field)
			case "password":
				return ec.fieldContext_Church_password(ctx, field)
			case "email":
				return ec.fieldContext_Church_email(ctx, field)
			case "types":
				return ec.fieldContext_Church_types(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Church_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Church_createdAt(ctx, field)
			case "token":
				return ec.fieldContext_Church_token(ctx, field)
			case "subChurches":
				return ec.fieldContext_Church_subChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Church", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_churchId(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_churchId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChurchID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_churchId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_isLocal(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_isLocal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLocal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_isLocal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_leaders(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_leaders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Leaders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_leaders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_members(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_members(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Member)
	fc.Result = res
	return ec.marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_members(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Member_id(ctx, field)
			case "name":
				return ec.fieldContext_Member_name(ctx, field)
			case "email":
				return ec.fieldContext_Member_email(ctx, field)
			case "phoneNumber":
				return ec.fieldContext_Member_phoneNumber(ctx, field)
			case "location":
				return ec.fieldContext_Member_location(ctx, field)
			case "day":
				return ec.fieldContext_Member_day(ctx, field)
			case "password":
				return ec.fieldContext_Member_password(ctx, field)
			case "pwood":
				return ec.fieldContext_Member_pwood(ctx, field)
			case "types":
				return ec.fieldContext_Member_types(ctx, field)
			case "token":
				return ec.fieldContext_Member_token(ctx, field)
			case "leader":
				return ec.fieldContext_Member_leader(ctx, field)
			case "LeaderID":
				return ec.fieldContext_Member_LeaderID(ctx, field)
			case "ReferenceIDCount":
				return ec.fieldContext_Member_ReferenceIDCount(ctx, field)
			case "registrations":
				return ec.fieldContext_Member_registrations(ctx, field)
			case "subChurch":
				return ec.fieldContext_Member_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Member_subChurchID(ctx, field)
			case "personalInfor":
				return ec.fieldContext_Member_personalInfor(ctx, field)
			case "churchMinistries":
				return ec.fieldContext_Member_churchMinistries(ctx, field)
			case "personalInforId":
				return ec.fieldContext_Member_personalInforId(ctx, field)
			case "updatedAt":
				return ec.fieldContext_Member_updatedAt(ctx, field)
			case "createdAt":
				return ec.fieldContext_Member_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Member", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_CallCenterID(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_CallCenterID(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CallCenterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_CallCenterID(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SubChurch_CallCenter(ctx context.Context, field graphql.CollectedField, obj *model.SubChurch) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SubChurch_CallCenter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CallCenter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.CallCenter)
	fc.Result = res
	return ec.marshalOCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SubChurch_CallCenter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SubChurch",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "ID":
				return ec.fieldContext_CallCenter_ID(ctx, field)
			case "Name":
				return ec.fieldContext_CallCenter_Name(ctx, field)
			case "Password":
				return ec.fieldContext_CallCenter_Password(ctx, field)
			case "Email":
				return ec.fieldContext_CallCenter_Email(ctx, field)
			case "Types":
				return ec.fieldContext_CallCenter_Types(ctx, field)
			case "Token":
				return ec.fieldContext_CallCenter_Token(ctx, field)
			case "UpdatedAt":
				return ec.fieldContext_CallCenter_UpdatedAt(ctx, field)
			case "CreatedAt":
				return ec.fieldContext_CallCenter_CreatedAt(ctx, field)
			case "SubChurches":
				return ec.fieldContext_CallCenter_SubChurches(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type CallCenter", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyResults_date(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WeeklyResults_date(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DateInfo)
	fc.Result = res
	return ec.marshalODateInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐDateInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WeeklyResults_date(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "month":
				return ec.fieldContext_DateInfo_month(ctx, field)
			case "weekOfMonth":
				return ec.fieldContext_DateInfo_weekOfMonth(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DateInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _WeeklyResults_registrations(ctx context.Context, field graphql.CollectedField, obj *model.WeeklyResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WeeklyResults_registrations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registrations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Registration)
	fc.Result = res
	return ec.marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WeeklyResults_registrations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WeeklyResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Registration_id(ctx, field)
			case "lastComment":
				return ec.fieldContext_Registration_lastComment(ctx, field)
			case "absence":
				return ec.fieldContext_Registration_absence(ctx, field)
			case "present":
				return ec.fieldContext_Registration_present(ctx, field)
			case "report":
				return ec.fieldContext_Registration_report(ctx, field)
			case "done":
				return ec.fieldContext_Registration_done(ctx, field)
			case "createdAt":
				return ec.fieldContext_Registration_createdAt(ctx, field)
			case "leaderName":
				return ec.fieldContext_Registration_leaderName(ctx, field)
			case "memberName":
				return ec.fieldContext_Registration_memberName(ctx, field)
			case "leader":
				return ec.fieldContext_Registration_leader(ctx, field)
			case "leaderID":
				return ec.fieldContext_Registration_leaderID(ctx, field)
			case "member":
				return ec.fieldContext_Registration_member(ctx, field)
			case "subChurch":
				return ec.fieldContext_Registration_subChurch(ctx, field)
			case "subChurchID":
				return ec.fieldContext_Registration_subChurchID(ctx, field)
			case "tempLeaderID":
				return ec.fieldContext_Registration_tempLeaderID(ctx, field)
			case "memberID":
				return ec.fieldContext_Registration_memberID(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Registration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputChurchMinistryRoleInpt(ctx context.Context, obj interface{}) (model.ChurchMinistryRoleInpt, error) {
	var it model.ChurchMinistryRoleInpt
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"role"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Role = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMemberInput(ctx context.Context, obj interface{}) (model.CreateMemberInput, error) {
	var it model.CreateMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phoneNumber", "day", "location", "address", "leaderType", "churchId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Day = data
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		case "leaderType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("leaderType"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LeaderType = data
		case "churchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("churchId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChurchID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateMemberInputBySub(ctx context.Context, obj interface{}) (model.CreateMemberInputBySub, error) {
	var it model.CreateMemberInputBySub
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phoneNumber", "day", "location", "address"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Day = data
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Address = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRegistrationInput(ctx context.Context, obj interface{}) (model.CreateRegistrationInput, error) {
	var it model.CreateRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"absence", "lastComment", "present"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "absence":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("absence"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Absence = data
		case "lastComment":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastComment"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.LastComment = data
		case "present":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("present"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Present = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmergencyContactInput(ctx context.Context, obj interface{}) (model.EmergencyContactInput, error) {
	var it model.EmergencyContactInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "phoneNumber", "relation"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "relation":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relation"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Relation = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJobInfoInput(ctx context.Context, obj interface{}) (model.JobInfoInput, error) {
	var it model.JobInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"typeOfWork", "position", "company", "workExperience"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "typeOfWork":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("typeOfWork"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.TypeOfWork = data
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Position = data
		case "company":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("company"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Company = data
		case "workExperience":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workExperience"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.WorkExperience = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginInput(ctx context.Context, obj interface{}) (model.LoginInput, error) {
	var it model.LoginInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password", "phoneNumber"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLoginLeaderInput(ctx context.Context, obj interface{}) (model.LoginLeaderInput, error) {
	var it model.LoginLeaderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"password", "phoneNumber", "email"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegistrationArrayInput(ctx context.Context, obj interface{}) (model.RegistrationArrayInput, error) {
	var it model.RegistrationArrayInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberId", "createInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MemberID = data
		case "createInput":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createInput"))
			data, err := ec.unmarshalNCreateRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreateInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegistrationArrayInputs(ctx context.Context, obj interface{}) (model.RegistrationArrayInputs, error) {
	var it model.RegistrationArrayInputs
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"registrationIDs", "createInput"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "registrationIDs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationIDs"))
			data, err := ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.RegistrationIDs = data
		case "createInput":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createInput"))
			data, err := ec.unmarshalNCreateRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, v)
			if err != nil {
				return it, err
			}
			it.CreateInput = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputReportRegistrationInput(ctx context.Context, obj interface{}) (model.ReportRegistrationInput, error) {
	var it model.ReportRegistrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"report", "done"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "report":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("report"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Report = data
		case "done":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("done"))
			data, err := ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
			it.Done = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSubChurchMigrationInput(ctx context.Context, obj interface{}) (model.SubChurchMigrationInput, error) {
	var it model.SubChurchMigrationInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberId", "destinationChurchId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MemberID = data
		case "destinationChurchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destinationChurchId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.DestinationChurchID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputassignLeaderInput(ctx context.Context, obj interface{}) (model.AssignLeaderInput, error) {
	var it model.AssignLeaderInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"memberId", "password", "types"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "memberId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.MemberID = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "types":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("types"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Types = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputassignSubLeaderToMemberRegistrationArrayInput(ctx context.Context, obj interface{}) (model.AssignSubLeaderToMemberRegistrationArrayInput, error) {
	var it model.AssignSubLeaderToMemberRegistrationArrayInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"callAgentId", "day"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "callAgentId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("callAgentId"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.CallAgentID = data
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			data, err := ec.unmarshalNString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
			it.Day = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateLeaderProfileInput(ctx context.Context, obj interface{}) (model.UpdateLeaderProfileInput, error) {
	var it model.UpdateLeaderProfileInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phoneNumber", "oldpassword", "password", "pwood", "location"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "oldpassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oldpassword"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Oldpassword = data
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Password = data
		case "pwood":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwood"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pwood = data
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateMemberFamilyInfoInput(ctx context.Context, obj interface{}) (model.UpdateMemberFamilyInfoInput, error) {
	var it model.UpdateMemberFamilyInfoInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"spouseId", "dateOfBirth", "memberID", "relationship", "nextOfKin", "education", "childrenId"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "spouseId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("spouseId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.SpouseID = data
		case "dateOfBirth":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dateOfBirth"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.DateOfBirth = data
		case "memberID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberID"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.MemberID = data
		case "relationship":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("relationship"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Relationship = data
		case "nextOfKin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nextOfKin"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.NextOfKin = data
		case "education":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("education"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Education = data
		case "childrenId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("childrenId"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.ChildrenID = data
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputupdateMemberInput(ctx context.Context, obj interface{}) (model.UpdateMemberInput, error) {
	var it model.UpdateMemberInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"name", "email", "phoneNumber", "day", "location", "pwood"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Name = data
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Email = data
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.PhoneNumber = data
		case "day":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("day"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Day = data
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Location = data
		case "pwood":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pwood"))
			data, err := ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
			it.Pwood = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Returns(ctx context.Context, sel ast.SelectionSet, obj model.Returns) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case model.Church:
		return ec._Church(ctx, sel, &obj)
	case *model.Church:
		if obj == nil {
			return graphql.Null
		}
		return ec._Church(ctx, sel, obj)
	case model.SubChurch:
		return ec._SubChurch(ctx, sel, &obj)
	case *model.SubChurch:
		if obj == nil {
			return graphql.Null
		}
		return ec._SubChurch(ctx, sel, obj)
	case model.Member:
		return ec._Member(ctx, sel, &obj)
	case *model.Member:
		if obj == nil {
			return graphql.Null
		}
		return ec._Member(ctx, sel, obj)
	case model.CallCenter:
		return ec._CallCenter(ctx, sel, &obj)
	case *model.CallCenter:
		if obj == nil {
			return graphql.Null
		}
		return ec._CallCenter(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var callCenterImplementors = []string{"CallCenter", "Returns"}

func (ec *executionContext) _CallCenter(ctx context.Context, sel ast.SelectionSet, obj *model.CallCenter) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, callCenterImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CallCenter")
		case "ID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._CallCenter_ID(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "Name":
			out.Values[i] = ec._CallCenter_Name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "Password":
			out.Values[i] = ec._CallCenter_Password(ctx, field, obj)
		case "Email":
			out.Values[i] = ec._CallCenter_Email(ctx, field, obj)
		case "Types":
			out.Values[i] = ec._CallCenter_Types(ctx, field, obj)
		case "Token":
			out.Values[i] = ec._CallCenter_Token(ctx, field, obj)
		case "UpdatedAt":
			out.Values[i] = ec._CallCenter_UpdatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "CreatedAt":
			out.Values[i] = ec._CallCenter_CreatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "SubChurches":
			out.Values[i] = ec._CallCenter_SubChurches(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var churchImplementors = []string{"Church", "Returns"}

func (ec *executionContext) _Church(ctx context.Context, sel ast.SelectionSet, obj *model.Church) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, churchImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Church")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Church_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Church_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "password":
			out.Values[i] = ec._Church_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Church_email(ctx, field, obj)
		case "types":
			out.Values[i] = ec._Church_types(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Church_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Church_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "token":
			out.Values[i] = ec._Church_token(ctx, field, obj)
		case "subChurches":
			out.Values[i] = ec._Church_subChurches(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var churchMinistryRoleImplementors = []string{"ChurchMinistryRole"}

func (ec *executionContext) _ChurchMinistryRole(ctx context.Context, sel ast.SelectionSet, obj *model.ChurchMinistryRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, churchMinistryRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChurchMinistryRole")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._ChurchMinistryRole_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "role":
			out.Values[i] = ec._ChurchMinistryRole_role(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var dateInfoImplementors = []string{"DateInfo"}

func (ec *executionContext) _DateInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DateInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dateInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DateInfo")
		case "month":
			out.Values[i] = ec._DateInfo_month(ctx, field, obj)
		case "weekOfMonth":
			out.Values[i] = ec._DateInfo_weekOfMonth(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var emergencyContactImplementors = []string{"EmergencyContact"}

func (ec *executionContext) _EmergencyContact(ctx context.Context, sel ast.SelectionSet, obj *model.EmergencyContact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emergencyContactImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmergencyContact")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmergencyContact_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._EmergencyContact_name(ctx, field, obj)
		case "phoneNumber":
			out.Values[i] = ec._EmergencyContact_phoneNumber(ctx, field, obj)
		case "relation":
			out.Values[i] = ec._EmergencyContact_relation(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._EmergencyContact_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._EmergencyContact_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var familyInfoImplementors = []string{"FamilyInfo"}

func (ec *executionContext) _FamilyInfo(ctx context.Context, sel ast.SelectionSet, obj *model.FamilyInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, familyInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FamilyInfo")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._FamilyInfo_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lastName":
			out.Values[i] = ec._FamilyInfo_lastName(ctx, field, obj)
		case "spouseId":
			out.Values[i] = ec._FamilyInfo_spouseId(ctx, field, obj)
		case "dateOfBirth":
			out.Values[i] = ec._FamilyInfo_dateOfBirth(ctx, field, obj)
		case "member":
			out.Values[i] = ec._FamilyInfo_member(ctx, field, obj)
		case "memberID":
			out.Values[i] = ec._FamilyInfo_memberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "spouse":
			out.Values[i] = ec._FamilyInfo_spouse(ctx, field, obj)
		case "spouseNameNotVbci":
			out.Values[i] = ec._FamilyInfo_spouseNameNotVbci(ctx, field, obj)
		case "spousePhoneNumberNotVbci":
			out.Values[i] = ec._FamilyInfo_spousePhoneNumberNotVbci(ctx, field, obj)
		case "children":
			out.Values[i] = ec._FamilyInfo_children(ctx, field, obj)
		case "relationship":
			out.Values[i] = ec._FamilyInfo_relationship(ctx, field, obj)
		case "nextOfKin":
			out.Values[i] = ec._FamilyInfo_nextOfKin(ctx, field, obj)
		case "occupation":
			out.Values[i] = ec._FamilyInfo_occupation(ctx, field, obj)
		case "occupationId":
			out.Values[i] = ec._FamilyInfo_occupationId(ctx, field, obj)
		case "education":
			out.Values[i] = ec._FamilyInfo_education(ctx, field, obj)
		case "emergencyContact":
			out.Values[i] = ec._FamilyInfo_emergencyContact(ctx, field, obj)
		case "emergencyContactId":
			out.Values[i] = ec._FamilyInfo_emergencyContactId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._FamilyInfo_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._FamilyInfo_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var financeImplementors = []string{"Finance"}

func (ec *executionContext) _Finance(ctx context.Context, sel ast.SelectionSet, obj *model.Finance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, financeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Finance")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Finance_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Finance_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "password":
			out.Values[i] = ec._Finance_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Finance_email(ctx, field, obj)
		case "types":
			out.Values[i] = ec._Finance_types(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Finance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Finance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "token":
			out.Values[i] = ec._Finance_token(ctx, field, obj)
		case "subChurches":
			out.Values[i] = ec._Finance_subChurches(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var jobInfoImplementors = []string{"JobInfo"}

func (ec *executionContext) _JobInfo(ctx context.Context, sel ast.SelectionSet, obj *model.JobInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, jobInfoImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("JobInfo")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._JobInfo_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "position":
			out.Values[i] = ec._JobInfo_position(ctx, field, obj)
		case "typeOfWork":
			out.Values[i] = ec._JobInfo_typeOfWork(ctx, field, obj)
		case "company":
			out.Values[i] = ec._JobInfo_company(ctx, field, obj)
		case "workExperience":
			out.Values[i] = ec._JobInfo_workExperience(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._JobInfo_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._JobInfo_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var leaderRegistrationsDistributionImplementors = []string{"LeaderRegistrationsDistribution"}

func (ec *executionContext) _LeaderRegistrationsDistribution(ctx context.Context, sel ast.SelectionSet, obj *model.LeaderRegistrationsDistribution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, leaderRegistrationsDistributionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LeaderRegistrationsDistribution")
		case "leaderID":
			out.Values[i] = ec._LeaderRegistrationsDistribution_leaderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registrationIDs":
			out.Values[i] = ec._LeaderRegistrationsDistribution_registrationIDs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberImplementors = []string{"Member", "Returns"}

func (ec *executionContext) _Member(ctx context.Context, sel ast.SelectionSet, obj *model.Member) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Member")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Member_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._Member_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "email":
			out.Values[i] = ec._Member_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "phoneNumber":
			out.Values[i] = ec._Member_phoneNumber(ctx, field, obj)
		case "location":
			out.Values[i] = ec._Member_location(ctx, field, obj)
		case "day":
			out.Values[i] = ec._Member_day(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "password":
			out.Values[i] = ec._Member_password(ctx, field, obj)
		case "pwood":
			out.Values[i] = ec._Member_pwood(ctx, field, obj)
		case "types":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Member_types(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "token":
			out.Values[i] = ec._Member_token(ctx, field, obj)
		case "leader":
			out.Values[i] = ec._Member_leader(ctx, field, obj)
		case "LeaderID":
			out.Values[i] = ec._Member_LeaderID(ctx, field, obj)
		case "ReferenceIDCount":
			out.Values[i] = ec._Member_ReferenceIDCount(ctx, field, obj)
		case "registrations":
			out.Values[i] = ec._Member_registrations(ctx, field, obj)
		case "subChurch":
			out.Values[i] = ec._Member_subChurch(ctx, field, obj)
		case "subChurchID":
			out.Values[i] = ec._Member_subChurchID(ctx, field, obj)
		case "personalInfor":
			out.Values[i] = ec._Member_personalInfor(ctx, field, obj)
		case "churchMinistries":
			out.Values[i] = ec._Member_churchMinistries(ctx, field, obj)
		case "personalInforId":
			out.Values[i] = ec._Member_personalInforId(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Member_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Member_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberChildrenImplementors = []string{"MemberChildren"}

func (ec *executionContext) _MemberChildren(ctx context.Context, sel ast.SelectionSet, obj *model.MemberChildren) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberChildrenImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberChildren")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemberChildren_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "ParentID":
			out.Values[i] = ec._MemberChildren_ParentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "childrenId":
			out.Values[i] = ec._MemberChildren_childrenId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var memberChurchMinistryRoleImplementors = []string{"MemberChurchMinistryRole"}

func (ec *executionContext) _MemberChurchMinistryRole(ctx context.Context, sel ast.SelectionSet, obj *model.MemberChurchMinistryRole) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, memberChurchMinistryRoleImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MemberChurchMinistryRole")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MemberChurchMinistryRole_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "memberID":
			out.Values[i] = ec._MemberChurchMinistryRole_memberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "churchMinistryRoleID":
			out.Values[i] = ec._MemberChurchMinistryRole_churchMinistryRoleID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ChurchMinistryRole":
			out.Values[i] = ec._MemberChurchMinistryRole_ChurchMinistryRole(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var migrationRequestImplementors = []string{"MigrationRequest"}

func (ec *executionContext) _MigrationRequest(ctx context.Context, sel ast.SelectionSet, obj *model.MigrationRequest) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, migrationRequestImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MigrationRequest")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._MigrationRequest_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "locationFrom":
			out.Values[i] = ec._MigrationRequest_locationFrom(ctx, field, obj)
		case "locationEnd":
			out.Values[i] = ec._MigrationRequest_locationEnd(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._MigrationRequest_createdAt(ctx, field, obj)
		case "memberID":
			out.Values[i] = ec._MigrationRequest_memberID(ctx, field, obj)
		case "MemberName":
			out.Values[i] = ec._MigrationRequest_MemberName(ctx, field, obj)
		case "destinationChurchID":
			out.Values[i] = ec._MigrationRequest_destinationChurchID(ctx, field, obj)
		case "statusID":
			out.Values[i] = ec._MigrationRequest_statusID(ctx, field, obj)
		case "status":
			out.Values[i] = ec._MigrationRequest_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "requestSubChurchMigration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_requestSubChurchMigration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "approveSubChurchMigration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_approveSubChurchMigration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "rejectSubChurchMigration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rejectSubChurchMigration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMemberbySubchurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMemberbySubchurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "importMemberData":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_importMemberData(ctx, field)
			})
		case "dataMembers":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_dataMembers(ctx, field)
			})
		case "cleanUpPhoneNumbers":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_cleanUpPhoneNumbers(ctx, field)
			})
		case "createMemberBysubLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMemberBysubLeader(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMemberFamilyInfo":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMemberFamilyInfo(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMemberEmergencyContact":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMemberEmergencyContact(ctx, field)
			})
		case "updateMemberJobInfoInput":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMemberJobInfoInput(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateMinistryRoleByLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateMinistryRoleByLeader(ctx, field)
			})
		case "updateLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLeader(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updatesubChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updatesubChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateCallCenter":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateCallCenter(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteMember":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteMember(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteSubChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteSubChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAllMembersBySubChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAllMembersBySubChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteRegistration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteRegistration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createSubChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSubChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createMianChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createMianChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignLeader(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "addAnotherType":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_addAnotherType(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateLeaderTypes":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateLeaderTypes(ctx, field)
			})
		case "assignMemberToLeaderbySubchurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignMemberToLeaderbySubchurch(ctx, field)
			})
		case "assignLeaderMemberRegisterToAnotherLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignLeaderMemberRegisterToAnotherLeader(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignSubLeaderToMemberRegistration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignSubLeaderToMemberRegistration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "assignSubLeaderToMemberRegistrationArray":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_assignSubLeaderToMemberRegistrationArray(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deleteAssignSubLeaderToMemberRegistration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteAssignSubLeaderToMemberRegistration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "tempLeadercreateRegistrationArray":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_tempLeadercreateRegistrationArray(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRegistrationArray":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRegistrationArray(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "removeLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeLeader(ctx, field)
			})
		case "createSubChurchesWithMainChurch":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSubChurchesWithMainChurch(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRegistration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRegistration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "createRegistrationArray":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createRegistrationArray(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRegistration":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRegistration(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "updateRegistrationByLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateRegistrationByLeader(ctx, field)
			})
		case "CreateCallCenterForSubChurchs":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_CreateCallCenterForSubChurchs(ctx, field)
			})
		case "distributeRegistrationsToLeaders":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_distributeRegistrationsToLeaders(ctx, field)
			})
		case "ReportRegistrationByLeader":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ReportRegistrationByLeader(ctx, field)
			})
		case "login":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_login(ctx, field)
			})
		case "memberlogin":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_memberlogin(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "logOut":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_logOut(ctx, field)
			})
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "GetAllMainChurch":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllMainChurch(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllsubChurchByMainChurchID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllsubChurchByMainChurchID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllsubChurchByMemberId":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllsubChurchByMemberId(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllMembersBySubChurchID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllMembersBySubChurchID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllMembersBySubChurchIDForCallAgent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllMembersBySubChurchIDForCallAgent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllSubChurchLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllSubChurchLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllMembersByLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllMembersByLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllSubLeaderByLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllSubLeaderByLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllMemberBySubLeaderToLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllMemberBySubLeaderToLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetNoteficationByLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetNoteficationByLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllRegistersByMemberID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllRegistersByMemberID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllmembersByDaysForCallAgent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllmembersByDaysForCallAgent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllDaysFormassignCallAgentToMemberRegistration":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllDaysFormassignCallAgentToMemberRegistration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "LastFourCommentsForMember":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_LastFourCommentsForMember(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllsubChurch":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllsubChurch(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetCallCenter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCallCenter(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllSubChurchByCallCenter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllSubChurchByCallCenter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetCaller":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCaller(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetCallAgent":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetCallAgent(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Getmember":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Getmember(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetMigration":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMigration(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetMigrationdestinationID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetMigrationdestinationID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "Getmembers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_Getmembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "todaysMembers":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_todaysMembers(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetsubChurchByID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetsubChurchByID(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "MembersBySubChurchID":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_MembersBySubChurchID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "registrationsByLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_registrationsByLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "CallRoom":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_CallRoom(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "GetAllRegistersByTempLeader":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAllRegistersByTempLeader(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentWeekRegistrations":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentWeekRegistrations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentWeekRegistrationsforsub":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentWeekRegistrationsforsub(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "currentWeekRegistrationsforCallCenter":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentWeekRegistrationsforCallCenter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "WeekRegistrationsforSub":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_WeekRegistrationsforSub(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx,
					func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return rrm(innerCtx) })
		case "__type":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})
		case "__schema":
			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registrationImplementors = []string{"Registration"}

func (ec *executionContext) _Registration(ctx context.Context, sel ast.SelectionSet, obj *model.Registration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registrationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Registration")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Registration_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "lastComment":
			out.Values[i] = ec._Registration_lastComment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "absence":
			out.Values[i] = ec._Registration_absence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "present":
			out.Values[i] = ec._Registration_present(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "report":
			out.Values[i] = ec._Registration_report(ctx, field, obj)
		case "done":
			out.Values[i] = ec._Registration_done(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Registration_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "leaderName":
			out.Values[i] = ec._Registration_leaderName(ctx, field, obj)
		case "memberName":
			out.Values[i] = ec._Registration_memberName(ctx, field, obj)
		case "leader":
			out.Values[i] = ec._Registration_leader(ctx, field, obj)
		case "leaderID":
			out.Values[i] = ec._Registration_leaderID(ctx, field, obj)
		case "member":
			out.Values[i] = ec._Registration_member(ctx, field, obj)
		case "subChurch":
			out.Values[i] = ec._Registration_subChurch(ctx, field, obj)
		case "subChurchID":
			out.Values[i] = ec._Registration_subChurchID(ctx, field, obj)
		case "tempLeaderID":
			out.Values[i] = ec._Registration_tempLeaderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "memberID":
			out.Values[i] = ec._Registration_memberID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registrationByCallAgentImplementors = []string{"RegistrationByCallAgent"}

func (ec *executionContext) _RegistrationByCallAgent(ctx context.Context, sel ast.SelectionSet, obj *model.RegistrationByCallAgent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registrationByCallAgentImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegistrationByCallAgent")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegistrationByCallAgent_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "callAgentId":
			out.Values[i] = ec._RegistrationByCallAgent_callAgentId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "callAgent":
			out.Values[i] = ec._RegistrationByCallAgent_callAgent(ctx, field, obj)
		case "day":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._RegistrationByCallAgent_day(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var registrationsDistributionImplementors = []string{"RegistrationsDistribution"}

func (ec *executionContext) _RegistrationsDistribution(ctx context.Context, sel ast.SelectionSet, obj *model.RegistrationsDistribution) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registrationsDistributionImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegistrationsDistribution")
		case "leaderID":
			out.Values[i] = ec._RegistrationsDistribution_leaderID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "registrationIDs":
			out.Values[i] = ec._RegistrationsDistribution_registrationIDs(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var subChurchImplementors = []string{"SubChurch", "Returns"}

func (ec *executionContext) _SubChurch(ctx context.Context, sel ast.SelectionSet, obj *model.SubChurch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subChurchImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubChurch")
		case "id":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._SubChurch_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "name":
			out.Values[i] = ec._SubChurch_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "password":
			out.Values[i] = ec._SubChurch_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._SubChurch_email(ctx, field, obj)
		case "types":
			out.Values[i] = ec._SubChurch_types(ctx, field, obj)
		case "token":
			out.Values[i] = ec._SubChurch_token(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._SubChurch_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._SubChurch_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "church":
			out.Values[i] = ec._SubChurch_church(ctx, field, obj)
		case "churchId":
			out.Values[i] = ec._SubChurch_churchId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "isLocal":
			out.Values[i] = ec._SubChurch_isLocal(ctx, field, obj)
		case "leaders":
			out.Values[i] = ec._SubChurch_leaders(ctx, field, obj)
		case "members":
			out.Values[i] = ec._SubChurch_members(ctx, field, obj)
		case "CallCenterID":
			out.Values[i] = ec._SubChurch_CallCenterID(ctx, field, obj)
		case "CallCenter":
			out.Values[i] = ec._SubChurch_CallCenter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var weeklyResultsImplementors = []string{"WeeklyResults"}

func (ec *executionContext) _WeeklyResults(ctx context.Context, sel ast.SelectionSet, obj *model.WeeklyResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, weeklyResultsImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WeeklyResults")
		case "date":
			out.Values[i] = ec._WeeklyResults_date(ctx, field, obj)
		case "registrations":
			out.Values[i] = ec._WeeklyResults_registrations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isRepeatable":
			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":
			out.Values[i] = ec.___Schema_description(ctx, field, obj)
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		case "specifiedByURL":
			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNCallCenter2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx context.Context, sel ast.SelectionSet, v model.CallCenter) graphql.Marshaler {
	return ec._CallCenter(ctx, sel, &v)
}

func (ec *executionContext) marshalNCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx context.Context, sel ast.SelectionSet, v *model.CallCenter) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._CallCenter(ctx, sel, v)
}

func (ec *executionContext) marshalNChurch2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx context.Context, sel ast.SelectionSet, v model.Church) graphql.Marshaler {
	return ec._Church(ctx, sel, &v)
}

func (ec *executionContext) marshalNChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx context.Context, sel ast.SelectionSet, v *model.Church) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Church(ctx, sel, v)
}

func (ec *executionContext) unmarshalNChurchMinistryRoleInpt2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRoleInpt(ctx context.Context, v interface{}) (model.ChurchMinistryRoleInpt, error) {
	res, err := ec.unmarshalInputChurchMinistryRoleInpt(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateRegistrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx context.Context, v interface{}) (model.CreateRegistrationInput, error) {
	res, err := ec.unmarshalInputCreateRegistrationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateRegistrationInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx context.Context, v interface{}) ([]*model.CreateRegistrationInput, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.CreateRegistrationInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOCreateRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNCreateRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx context.Context, v interface{}) (*model.CreateRegistrationInput, error) {
	res, err := ec.unmarshalInputCreateRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEmergencyContactInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐEmergencyContactInput(ctx context.Context, v interface{}) (model.EmergencyContactInput, error) {
	res, err := ec.unmarshalInputEmergencyContactInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFamilyInfo2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐFamilyInfo(ctx context.Context, sel ast.SelectionSet, v model.FamilyInfo) graphql.Marshaler {
	return ec._FamilyInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNFamilyInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐFamilyInfo(ctx context.Context, sel ast.SelectionSet, v *model.FamilyInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FamilyInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNJobInfo2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfo(ctx context.Context, sel ast.SelectionSet, v model.JobInfo) graphql.Marshaler {
	return ec._JobInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNJobInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfo(ctx context.Context, sel ast.SelectionSet, v *model.JobInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._JobInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNJobInfoInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfoInput(ctx context.Context, v interface{}) (model.JobInfoInput, error) {
	res, err := ec.unmarshalInputJobInfoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLoginLeaderInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLoginLeaderInput(ctx context.Context, v interface{}) (model.LoginLeaderInput, error) {
	res, err := ec.unmarshalInputLoginLeaderInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMember2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v model.Member) graphql.Marshaler {
	return ec._Member(ctx, sel, &v)
}

func (ec *executionContext) marshalNMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Member) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v *model.Member) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) marshalNMigrationRequest2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx context.Context, sel ast.SelectionSet, v model.MigrationRequest) graphql.Marshaler {
	return ec._MigrationRequest(ctx, sel, &v)
}

func (ec *executionContext) marshalNMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx context.Context, sel ast.SelectionSet, v *model.MigrationRequest) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._MigrationRequest(ctx, sel, v)
}

func (ec *executionContext) marshalNRegistration2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx context.Context, sel ast.SelectionSet, v model.Registration) graphql.Marshaler {
	return ec._Registration(ctx, sel, &v)
}

func (ec *executionContext) marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx context.Context, sel ast.SelectionSet, v []*model.Registration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNRegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Registration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx context.Context, sel ast.SelectionSet, v *model.Registration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Registration(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRegistrationArrayInputs2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInputs(ctx context.Context, v interface{}) ([]*model.RegistrationArrayInputs, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RegistrationArrayInputs, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORegistrationArrayInputs2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInputs(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNRegistrationByCallAgent2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationByCallAgent(ctx context.Context, sel ast.SelectionSet, v []*model.RegistrationByCallAgent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegistrationByCallAgent2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationByCallAgent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNReturns2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReturns(ctx context.Context, sel ast.SelectionSet, v model.Returns) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Returns(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNSubChurch2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx context.Context, sel ast.SelectionSet, v model.SubChurch) graphql.Marshaler {
	return ec._SubChurch(ctx, sel, &v)
}

func (ec *executionContext) marshalNSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SubChurch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx context.Context, sel ast.SelectionSet, v *model.SubChurch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SubChurch(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSubChurchMigrationInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurchMigrationInput(ctx context.Context, v interface{}) (model.SubChurchMigrationInput, error) {
	res, err := ec.unmarshalInputSubChurchMigrationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNupdateLeaderProfileInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateLeaderProfileInput(ctx context.Context, v interface{}) (model.UpdateLeaderProfileInput, error) {
	res, err := ec.unmarshalInputupdateLeaderProfileInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateMemberFamilyInfoInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateMemberFamilyInfoInput(ctx context.Context, v interface{}) (model.UpdateMemberFamilyInfoInput, error) {
	res, err := ec.unmarshalInputupdateMemberFamilyInfoInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNupdateMemberInput2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐUpdateMemberInput(ctx context.Context, v interface{}) (model.UpdateMemberInput, error) {
	res, err := ec.unmarshalInputupdateMemberInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOCallCenter2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx context.Context, sel ast.SelectionSet, v []*model.CallCenter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOCallCenter2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCallCenter(ctx context.Context, sel ast.SelectionSet, v *model.CallCenter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CallCenter(ctx, sel, v)
}

func (ec *executionContext) marshalOChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx context.Context, sel ast.SelectionSet, v []*model.Church) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurch(ctx context.Context, sel ast.SelectionSet, v *model.Church) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Church(ctx, sel, v)
}

func (ec *executionContext) marshalOChurchMinistryRole2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRole(ctx context.Context, sel ast.SelectionSet, v *model.ChurchMinistryRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChurchMinistryRole(ctx, sel, v)
}

func (ec *executionContext) unmarshalOChurchMinistryRolesEnum2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRolesEnum(ctx context.Context, v interface{}) (*model.ChurchMinistryRolesEnum, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ChurchMinistryRolesEnum)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChurchMinistryRolesEnum2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐChurchMinistryRolesEnum(ctx context.Context, sel ast.SelectionSet, v *model.ChurchMinistryRolesEnum) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOCreateMemberInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateMemberInput(ctx context.Context, v interface{}) (*model.CreateMemberInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateMemberInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateMemberInputBySub2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateMemberInputBySub(ctx context.Context, v interface{}) (*model.CreateMemberInputBySub, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateMemberInputBySub(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐCreateRegistrationInput(ctx context.Context, v interface{}) (*model.CreateRegistrationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐDateInfo(ctx context.Context, sel ast.SelectionSet, v *model.DateInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DateInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOEmergencyContact2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐEmergencyContact(ctx context.Context, sel ast.SelectionSet, v *model.EmergencyContact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EmergencyContact(ctx, sel, v)
}

func (ec *executionContext) marshalOFamilyInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐFamilyInfo(ctx context.Context, sel ast.SelectionSet, v *model.FamilyInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FamilyInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOJobInfo2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐJobInfo(ctx context.Context, sel ast.SelectionSet, v *model.JobInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._JobInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOLeaderRegistrationsDistribution2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLeaderRegistrationsDistribution(ctx context.Context, sel ast.SelectionSet, v []*model.LeaderRegistrationsDistribution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLeaderRegistrationsDistribution2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLeaderRegistrationsDistribution(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOLeaderRegistrationsDistribution2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐLeaderRegistrationsDistribution(ctx context.Context, sel ast.SelectionSet, v *model.LeaderRegistrationsDistribution) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LeaderRegistrationsDistribution(ctx, sel, v)
}

func (ec *executionContext) marshalOMember2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v model.Member) graphql.Marshaler {
	return ec._Member(ctx, sel, &v)
}

func (ec *executionContext) marshalOMember2ᚕgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v []model.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMember2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMember2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v []*model.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMember2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMember(ctx context.Context, sel ast.SelectionSet, v *model.Member) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Member(ctx, sel, v)
}

func (ec *executionContext) marshalOMemberChurchMinistryRole2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberChurchMinistryRole(ctx context.Context, sel ast.SelectionSet, v []*model.MemberChurchMinistryRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMemberChurchMinistryRole2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberChurchMinistryRole(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMemberChurchMinistryRole2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMemberChurchMinistryRole(ctx context.Context, sel ast.SelectionSet, v *model.MemberChurchMinistryRole) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MemberChurchMinistryRole(ctx, sel, v)
}

func (ec *executionContext) marshalOMigrationRequest2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx context.Context, sel ast.SelectionSet, v []*model.MigrationRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMigrationRequest2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationRequest(ctx context.Context, sel ast.SelectionSet, v *model.MigrationRequest) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MigrationRequest(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMigrationStatus2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationStatus(ctx context.Context, v interface{}) (*model.MigrationStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.MigrationStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMigrationStatus2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐMigrationStatus(ctx context.Context, sel ast.SelectionSet, v *model.MigrationStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalORegistration2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx context.Context, sel ast.SelectionSet, v []*model.Registration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalORegistration2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistration(ctx context.Context, sel ast.SelectionSet, v *model.Registration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Registration(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegistrationArrayInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInput(ctx context.Context, v interface{}) ([]*model.RegistrationArrayInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.RegistrationArrayInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalORegistrationArrayInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalORegistrationArrayInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInput(ctx context.Context, v interface{}) (*model.RegistrationArrayInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegistrationArrayInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORegistrationArrayInputs2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationArrayInputs(ctx context.Context, v interface{}) (*model.RegistrationArrayInputs, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegistrationArrayInputs(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegistrationByCallAgent2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐRegistrationByCallAgent(ctx context.Context, sel ast.SelectionSet, v *model.RegistrationByCallAgent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegistrationByCallAgent(ctx, sel, v)
}

func (ec *executionContext) unmarshalOReportRegistrationInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReportRegistrationInput(ctx context.Context, v interface{}) (*model.ReportRegistrationInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputReportRegistrationInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOReturns2githubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐReturns(ctx context.Context, sel ast.SelectionSet, v model.Returns) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Returns(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	return res
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOSubChurch2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx context.Context, sel ast.SelectionSet, v []*model.SubChurch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSubChurch2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐSubChurch(ctx context.Context, sel ast.SelectionSet, v *model.SubChurch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubChurch(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalOassignLeaderInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignLeaderInput(ctx context.Context, v interface{}) (*model.AssignLeaderInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputassignLeaderInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOassignSubLeaderToMemberRegistrationArrayInput2ᚕᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignSubLeaderToMemberRegistrationArrayInput(ctx context.Context, v interface{}) ([]*model.AssignSubLeaderToMemberRegistrationArrayInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.AssignSubLeaderToMemberRegistrationArrayInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOassignSubLeaderToMemberRegistrationArrayInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignSubLeaderToMemberRegistrationArrayInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOassignSubLeaderToMemberRegistrationArrayInput2ᚖgithubᚗcomᚋkobbiᚋvbciapiᚋgraphᚋmodelᚐAssignSubLeaderToMemberRegistrationArrayInput(ctx context.Context, v interface{}) (*model.AssignSubLeaderToMemberRegistrationArrayInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputassignSubLeaderToMemberRegistrationArrayInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

// endregion ***************************** type.gotpl *****************************
