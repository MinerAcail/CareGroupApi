// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CreateMemberInput struct {
	Name        string  `json:"name"`
	Email       string  `json:"email"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Day         string  `json:"day"`
	Location    *string `json:"location,omitempty"`
	Address     *string `json:"address,omitempty"`
	LeaderType  *string `json:"leaderType,omitempty"`
	ChurchID    string  `json:"churchId"`
}

type CreateMemberInputBySub struct {
	Name        string  `json:"name"`
	Email       string  `json:"email"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Day         string  `json:"day"`
	Location    *string `json:"location,omitempty"`
	Address     *string `json:"address,omitempty"`
}

type CreateRegistrationInput struct {
	Absence     *bool   `json:"absence,omitempty"`
	LastComment *string `json:"lastComment,omitempty"`
	Present     *bool   `json:"present,omitempty"`
}

type DateInfo struct {
	Month       *string `json:"month,omitempty"`
	WeekOfMonth *int    `json:"weekOfMonth,omitempty"`
}

type LeaderRegistrationsDistribution struct {
	LeaderID        string   `json:"leaderID"`
	RegistrationIDs []string `json:"registrationIDs"`
}

type LoginInput struct {
	Password    string `json:"password"`
	PhoneNumber string `json:"phoneNumber"`
}

type LoginLeaderInput struct {
	Password    string  `json:"password"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Email       *string `json:"email,omitempty"`
}

type Person struct {
	ID    string    `json:"id"`
	Name  string    `json:"name"`
	Email []*string `json:"email"`
}

type RegistrationArrayInput struct {
	MemberID    string                   `json:"memberId"`
	CreateInput *CreateRegistrationInput `json:"createInput"`
}

type RegistrationArrayInputs struct {
	RegistrationIDs string                   `json:"registrationIDs"`
	CreateInput     *CreateRegistrationInput `json:"createInput"`
}

type RegistrationsDistribution struct {
	LeaderID        string   `json:"leaderID"`
	RegistrationIDs []string `json:"registrationIDs"`
}

type ReportRegistrationInput struct {
	Report *bool `json:"report,omitempty"`
	Done   *bool `json:"done,omitempty"`
}

type SubChurchMigrationInput struct {
	MemberID            string `json:"memberId"`
	DestinationChurchID string `json:"destinationChurchId"`
}

type WeeklyResults struct {
	Date          *DateInfo       `json:"date,omitempty"`
	Registrations []*Registration `json:"registrations,omitempty"`
}

type AssignLeaderInput struct {
	MemberID string  `json:"memberId"`
	Password *string `json:"password,omitempty"`
	Types    *string `json:"types,omitempty"`
}

type UpdateLeaderProfileInput struct {
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Oldpassword *string `json:"oldpassword,omitempty"`
	Password    *string `json:"password,omitempty"`
	Location    *string `json:"location,omitempty"`
}

type UpdateMemberInput struct {
	Name        *string `json:"name,omitempty"`
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	Day         *string `json:"day,omitempty"`
	Location    *string `json:"location,omitempty"`
}

type MigrationStatus string

const (
	MigrationStatusPending   MigrationStatus = "PENDING"
	MigrationStatusApproved  MigrationStatus = "APPROVED"
	MigrationStatusRejected  MigrationStatus = "REJECTED"
	MigrationStatusCompleted MigrationStatus = "COMPLETED"
)

var AllMigrationStatus = []MigrationStatus{
	MigrationStatusPending,
	MigrationStatusApproved,
	MigrationStatusRejected,
	MigrationStatusCompleted,
}

func (e MigrationStatus) IsValid() bool {
	switch e {
	case MigrationStatusPending, MigrationStatusApproved, MigrationStatusRejected, MigrationStatusCompleted:
		return true
	}
	return false
}

func (e MigrationStatus) String() string {
	return string(e)
}

func (e *MigrationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MigrationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MigrationStatus", str)
	}
	return nil
}

func (e MigrationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
