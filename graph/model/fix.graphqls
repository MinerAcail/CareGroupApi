scalar DateTime

enum Days {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

type CareDay {
  id: Int!
  groupNumber: String!
  day: Days!
}

input CareDayInput {
  id: Int!
  groupNumber: String!
  day: Days!
}

type Church {
  id: Int!
  name: String!
  churchNumber: String!
  email: String!
  leaders: [Leader!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

input ChurchInput {
  name: String!
  email: String!
  churchNumber: String!
  password: String!
}

type Leader {
  id: Int!
  name: String!
  email: String
  phoneNumber: String!
  careDay: CareDay!
  roles: Role!
  token: String!
  church: Church!
  caredPersons: [CaredPerson!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Role {
  isManager: Boolean!
  isLeader: Boolean!
  isSubLeader: Boolean!
}

input RoleInput {
  isManager: Boolean!
  isLeader: Boolean!
  isSubLeader: Boolean!
}

input LeaderInput {
  name: String!
  email: String
  phoneNumber: String!
  careDay: CareDayInput!
  password: String!
  roles: RoleInput!
  location: String
  dateOfBirth: DateTime
  homeCell: String
  group: String
  work: String
}

type CaredPerson {
  id: Int!
  name: String!
  email: String
  phoneNumber: String!
  location: String!
  dateOfBirth: DateTime
  homeCell: String
  careDay: CareDay!
  work: String
  leader: Leader!
  registrations: [Registration!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Registration {
  id: Int!
  lastComment: String!
  absence: Boolean!
  present: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  caredPerson: CaredPerson!
}

input CaredPersonInput {
  name: String!
  email: String!
  phoneNumber: String!
  careDay: Days!
  location: String!
  dateOfBirth: DateTime!
  homeCell: String
  group: String!
  work: String
}

input RegisterInput {
  absence: Boolean!
  present: Boolean!
  lastComment: String
  createdAt: DateTime!
}

type Query {
  findCaredPerson(id: ID, name: String): CaredPerson!
  getCaredPersons: [CaredPerson!]!

  findLeader(id: ID, name: String): Leader!
  getLeaders: [Leader!]!

  findChurch(id: ID, name: String): Church!
  getChurches: [Church!]!

  findChurchDay(
    name: String
    careDay: Days
    location: String
    group: String
  ): [Church]!

  findCaredPersonDay(
    name: String
    careDay: Days
    location: String
    group: String
  ): [CaredPerson]!
}

type Mutation {
  createChurch(input: ChurchInput!): Church!
  createLeader(input: LeaderInput!): Leader!
  createCaredPerson(input: CaredPersonInput!): CaredPerson!
  updateCaredPerson(
    caredPersonID: Int!
    input: RegisterInput!
  ): Registration!
}
