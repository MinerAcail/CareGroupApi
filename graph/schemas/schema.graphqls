scalar Time
scalar Upload
scalar Myarray

type Member {
  id: String!
  name: String!
  email: String!
  phoneNumber: String
  location: String
  day: String!
  password: String
  types: [String!]!
  token: String
  LeaderID: String
  ReferenceIDCount: Int
  registrations: [Registration] # Define a relationship to Registration
  subChurch: SubChurch # Define a relationship to SubChurch
  subChurchID: String
  updatedAt: Time!
  createdAt: Time!
}
type Person {
  id: String!
  name: String!
  email: [String]!
}
type Registration {
  id: String!
  lastComment: String!
  absence: Boolean!
  present: Boolean!
  report: Boolean
  done: Boolean
  createdAt: Time!
  leaderName: String
  leader: Member
  leaderID: String
  member: Member
  subChurch: SubChurch
  subChurchID: String
  tempLeaderID: String!
  memberID: String!
}
input ReportRegistrationInput {
  report: Boolean
  done: Boolean
}
type Church {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  updatedAt: Time!
  createdAt: Time!
  token: String
  subChurches: [SubChurch!]!
}

type SubChurch {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  token: String
  updatedAt: Time!
  createdAt: Time!
  church: Church
  churchId: String!
  isLocal: Boolean
  leaders: [Member]
  members: [Member]
  CallCenterID: String
  CallCenter: CallCenter
}
type CallCenter {
  ID: String!
  Name: String!
  Password: String
  Email: String
  Types: String
  Token: String
  UpdatedAt: Time!
  CreatedAt: Time!
  SubChurches: [SubChurch]
}
union Returns = Church | SubChurch | Member

type WeeklyResults {
  date: DateInfo
  registrations: [Registration]
}
type DateInfo {
  month: String
  weekOfMonth: Int
}

type Query {
  GetAllMainChurch: [Church]
  GetAllsubChurchByMainChurchID(mainChurchId: String!): [SubChurch]
  GetAllsubChurchByMemberId(memberId: String!): [SubChurch]
  GetAllMembersBySubChurchID(subChurchId: String!): [Member]
  GetAllSubChurchLeader(subChurchId: String!): Member
  GetAllMembersByLeader(leaderID: String!): [Member]
  GetAllSubLeaderByLeader(leaderID: String!): [Member]
  GetAllRegistersByMemberID(MemberId: String!): [Registration]
  LastFourCommentsForMember(memberID: String!): [String]

  GetAllsubChurch: [SubChurch]
  GetCaller: [Member]
  GetCallAgent: [Member]

  # amember(id: String!): member

  Getmember(id: String!): Member
  GetMigration(id: String!): MigrationRequest
  GetMigrationdestinationID(destinationChurchID: String!): [MigrationRequest]
  Getmembers: [Member]
  todaysMembers: [Member]

  GetsubChurchByID(id: String!): SubChurch

  MembersBySubChurchID(subChurchId: String!): [Member!]!

  registrationsByLeader(mleaderID: String!): [Registration]
  CallRoom(subChurchId: String!): [Registration]
  GetAllRegistersByTempLeader(tempLeaderID: String!): [Registration]

  currentWeekRegistrations: [Registration!]!
  currentWeekRegistrationsforsub(subChurchId: String!): [Registration!]!
  WeekRegistrationsforSub: [Registration!]!
}

input CreateRegistrationInput {
  absence: Boolean
  lastComment: String
  present: Boolean
}

input CreateMemberInput {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
  leaderType: String
  churchId: String!
}

input CreateMemberInputBySub {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
}
input assignLeaderInput {
  memberId: String!
  password: String
  types: String
}

input LoginInput {
  password: String!
  phoneNumber: String!
}

type RegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}
input RegistrationArrayInput {
  memberId: String!
  createInput: CreateRegistrationInput!
}

type LeaderRegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}

input updateMemberInput {
  name: String
  email: String
  phoneNumber: String
  day: String
  location: String
}
input updateLeaderProfileInput {
  name: String
  email: String
  phoneNumber: String
  oldpassword: String
  password: String
  location: String
}
enum MigrationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
input SubChurchMigrationInput {
  memberId: String!
  destinationChurchId: String!
}

type MigrationRequest {
  id: String!
  locationFrom: String
  locationEnd: String
  # migratedTime: Time
  createdAt: Time
  memberID: String
  MemberName: String
  destinationChurchID: String
  statusID: String
  status: MigrationStatus
}
input RegistrationArrayInputs {
  registrationIDs: ID!
  createInput: CreateRegistrationInput!
}

type Mutation {
  requestSubChurchMigration(input: SubChurchMigrationInput!): MigrationRequest!
  approveSubChurchMigration(requestId: String!): MigrationRequest!
  rejectSubChurchMigration(requestId: String!): MigrationRequest!


  createMember(input: CreateMemberInput): Member!
  createMemberbySubchurch(input: CreateMemberInput): Member!


  importMemberData(file: Upload!, ChurchID: String): [Member]
  dataMembers: String
  cleanUpPhoneNumbers: [String]

  createMemberBysubLeader(input: CreateMemberInputBySub): Member!
  updateMember(input: updateMemberInput!, memberId: String!): Member!
  updateLeader(input: updateLeaderProfileInput!, memberId: String!): Member!
  updatesubChurch(
    input: updateLeaderProfileInput!
    subChurchId: String!
  ): SubChurch!

  createChurch(name: String!, email: String!, password: String): Church!
  deleteChurch(mainChurchId: String!): Boolean!
  deleteMember(memberId: String!): Boolean!
  deleteSubChurch(subChurchId: String!): Boolean!
  deleteRegistration(registrationId: String!): Boolean!

  createSubChurch(
    subChurchName: String
    branch: Boolean!
    isLocal: Boolean
  ): Church!
  createMianChurch(subChurchName: String): Church!
  # createsubBranch(subBranchName: String): Church!

  assignLeader(input: assignLeaderInput): Member!
  addAnotherType(memberId: String!, types: String): Member!
  updateLeaderTypes(id: String, tags: [String!]!): Member
  assignMemberToLeaderbySubchurch(leaderID: String!, memberID: String!): Member
  assignLeaderMemberRegisterToAnotherLeader(
    sendToLeaderID: String!
    sendFromLeaderID: String!
  ): [Registration]!

  tempLeadercreateRegistrationArray(
    input: [CreateRegistrationInput]!
    registrationID: [String]!
  ): [Registration]!
  # updateLeaderTypes( id: String,tags: [String!]!): Member
  updateRegistrationArray(input: [RegistrationArrayInputs]!): [Registration]!

  removeLeader(memberId: String!): Member

  createSubChurchesWithMainChurch(
    mainChurchId: String!
    subChurchNames: [String!]!
  ): Church!

  createRegistration(
    memberId: String!
    input: CreateRegistrationInput!
  ): Registration!
  createRegistrationArray(input: [RegistrationArrayInput]): [Registration]!

  updateRegistration(
    input: CreateRegistrationInput!
    registrationId: String!
  ): Registration!

  updateRegistrationByLeader(
    input: CreateRegistrationInput!
    registrationID: String!
    leaderID: String!
  ): Registration
  CreateCallCenterForSubChurchs(name: String!, subChurchIDs: [String!]!): CallCenter
  distributeRegistrationsToLeaders(
    leaderIds: [String!]!
  ): [LeaderRegistrationsDistribution]

  ReportRegistrationByLeader(
    report: ReportRegistrationInput
    registrationID: String!
    leaderID: String!
  ): Registration
  login(input: LoginLeaderInput!): Returns
  memberlogin(input: LoginLeaderInput!): Returns!

  logOut: Boolean!
}

input LoginLeaderInput {
  password: String!
  phoneNumber: String
  email: String
}
