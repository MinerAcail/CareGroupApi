scalar Time
scalar Upload
scalar Myarray
scalar Map

type Member {
  id: String!
  name: String!
  churchMinistries: [MemberChurchMinistryRole]
  email: String!
  phoneNumber: String
  location: String
  day: String!
  password: String
  pwood: String
  types: [String!]!
  token: String
  leader: Member
  LeaderID: String
  ReferenceIDCount: Int
  registrations: [Registration] # Define a relationship to Registration
  subChurch: SubChurch # Define a relationship to SubChurch
  subChurchID: String
  personalInfor: FamilyInfo # New nested field for family information
  personalInforId: String # New nested field for family information
  updatedAt: Time!
  createdAt: Time!
}
enum ChurchMinistryRolesEnum {
  PASTOR
  RAVEN
  BISHOP
  SECURITY
  SUNDAY_SCHOOL_TEACHER
  FINANCE
  USHER
  MUSIC
  DOMESTIC
  MEDIA
}

type ChurchMinistryRole {
  id: String!
  role: ChurchMinistryRolesEnum
  assignedSubChurch: SubChurch
  assignedSubChurchId: String
}

type MemberChurchMinistryRole {
  id: String!
  memberID: String!
  churchMinistryRoleID: String!
  ChurchMinistryRole: ChurchMinistryRole
}

type MemberChildren {
  id: String!
  ParentID: String!
  childrenId: String!
}

type FamilyInfo {
  id: String!
  lastName: String
  spouseId: String
  dateOfBirth: String
  member: Member
  memberID: String!
  spouse: Member
  spouseNameNotVbci: String
  spousePhoneNumberNotVbci: String
  children: [Member]
  relationship: String
  nextOfKin: String
  occupation: JobInfo
  occupationId: String
  education: String
  emergencyContact: EmergencyContact
  emergencyContactId: String
  updatedAt: Time!
  createdAt: Time!
  # Add more family-related fields as needed
}

type EmergencyContact {
  id: String!
  name: String
  phoneNumber: String
  relation: String
  updatedAt: Time!
  createdAt: Time!
}

type JobInfo {
  id: String!
  position: String
  typeOfWork: String
  company: String
  workExperience: String
  updatedAt: Time!
  createdAt: Time!
  # Add more job-related fields as needed
}

type RegistrationByCallAgent {
  id: String!
  callAgentId: String!
  callAgent: Member
  #   subChurch: SubChurch # Define a relationship to SubChurch
  # subChurchID: String
  day: [String!]!
  # registrations: [Registration]
}
type Registration {
  id: String!
  lastComment: String!
  absence: Boolean!
  present: Boolean!
  report: Boolean
  done: Boolean
  createdAt: Time!
  leaderName: String
  memberName: String
  leader: Member
  leaderID: String
  member: Member
  subChurch: SubChurch
  subChurchID: String
  tempLeaderID: String!
  memberID: String!
}
input ReportRegistrationInput {
  report: Boolean
  done: Boolean
}
type Church {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  updatedAt: Time!
  createdAt: Time!
  token: String
  subChurches: [SubChurch!]!
}
type Finance {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  updatedAt: Time!
  createdAt: Time!
  token: String
  subChurches: [SubChurch!]!
}

type SubChurch {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  token: String
  updatedAt: Time!
  createdAt: Time!
  church: Church
  churchId: String!
  isLocal: Boolean
  leaders: [Member]
  members: [Member]
  CallCenterID: String
  CallCenter: CallCenter
}
type CallCenter {
  ID: String!
  Name: String!
  Password: String
  Email: String
  Types: String
  Token: String
  UpdatedAt: Time!
  CreatedAt: Time!
  SubChurches: [SubChurch]
}
union Returns = Church | SubChurch | Member | CallCenter

type WeeklyResults {
  date: DateInfo
  registrations: [Registration]
}
type DateInfo {
  month: String
  weekOfMonth: Int
}
type RoleCounts {
  members: Int!
  pastors: Int!
  ravens: Int!
  bishops: Int!
  security: Int!
  sundaySchoolTeachers: Int!
  finance: Int!
  ushers: Int!
  music: Int!
  domestic: Int!
  media: Int!
  allRoles: Int!
}
type ChurchMinistryRoleWithCount {
  memberChurchMinistryRole: MemberChurchMinistryRole
  roleCount: Int
}

type RoleCount {
  roleName: String
  count: Int
}
type RoleCountResult {
  roleName: String!
  count: Int!
  roles: [MemberChurchMinistryRole]!
}
type RegistrationWeekly{
  data:[String!]!
  weekNumber: String
  SubChurchMemberRegistrationCount: Int!
  SubChurchName: String!


}
type RegistrationWeeklys{
  data:[String!]!
  weekNumber: [String!]!
  SubChurchMemberRegistrationCount: Int!
  SubChurchName: String!


}
type SortDatesReturn{
  registrationDataDates:[String!]!
  SubChurchMemberRegistrationCount: Int!
 

}
type SubChurchReturn {
  subChurchName: String!
  weekNumber: String

  subChurchMemberRegistrationCount: Map
}

type SubChurchCount {
  subChurchName: String!
  subChurchMemberRegistrationCount: [Map]
}

type KeyValue {
  key: String!
  value: Int!
}
type Query {
  GetAllMainChurch: [Church]
  GetAllsubChurchByMainChurchID(mainChurchId: String!): [SubChurch]
  GetAllsubChurchByMemberId(memberId: String!): [SubChurch]
  GetAllMembersBySubChurchID(subChurchId: String!): [Member]
  GetsubChurchTotalMember(subChurchId: String!): Int
getRoleCountsBySubChurch(subChurchID: String!): [RoleCounts]
 GetChurchMinistryRolesBySubChurchID(subChurchId: String!): [RoleCountResult]
  # GetAllBySubChChildrenByMemberID(memberId: String!): [Member]
  GetAllMembersBySubChurchIDForCallAgent(subChurchId: String!): [Member]
  GetAllSubChurchLeader(subChurchId: String!): Member
  GetAllMembersByLeader(leaderID: String!): [Member]
  GetAllSubLeaderByLeader(subChurchID: String!, day: String!): [Member]
  GetAllMemberBySubLeaderToLeader(subChurchID: String!, day: String!): [Member]
  GetNoteficationByLeader(subChurchID: String!, day: String): [Member]
  GetAllRegistersByMemberID(MemberId: String!): [Registration]

  GetAllmembersByDaysForCallAgent(CallAgentId: String!): [Member]
  GetAllDaysFormassignCallAgentToMemberRegistration: [String!]!

  LastFourCommentsForMember(memberID: String!): [String]

  GetAllsubChurch: [SubChurch]
  GetCallCenter: [CallCenter]
  GetAllSubChurchByCallCenter(CallCenterId: String!): [SubChurch!]!

  GetCaller: [Member]
  GetCallAgent: [Member]

  # amember(id: String!): member
getWeekNumberOfMonth(dayNumber:Int):String!
filterAndSortDates(dateStrings: [String!]!,churchId: String!):[RegistrationWeekly!]!
SortDates(churchId: String!):[String!]!

  Getmember(id: String!): Member
  GetMigration(id: String!): MigrationRequest
  GetMigrationdestinationID(destinationChurchID: String!): [MigrationRequest]
  # GetCallCenter: [CallCenter]
  Getmembers: [Member]
  todaysMembers: [Member]

  GetsubChurchByID(id: String!): SubChurch

  MembersBySubChurchID(subChurchId: String!): [Member!]!

  registrationsByLeader(mleaderID: String!): [Registration]
  CallRoom(subChurchId: String!): [Registration]
  GetAllRegistersByTempLeader(tempLeaderID: String!): [Registration]

  currentWeekRegistrations: [Registration!]!
  currentWeekRegistrationsforsub(subChurchId: String!): [Registration!]!
  currentWeekRegistrationsforCallCenter: [SubChurch!]!
  currentWeekRegistrationsforMainChuech(churchId: String!): [RegistrationWeeklyMap!]!
  WeekRegistrations(churchId: String!): [Registration!]!
  WeeklyRegistrations(churchId: String!): [Map!]!
  WeekRegistrationsforSub: [Registration!]!
}
type RegistrationWeeklyMap {
  weekNumber: String!
  registrations: [RegistrationWeekly!]!
}
input CreateRegistrationInput {
  absence: Boolean
  lastComment: String
  present: Boolean
}

input CreateMemberInput {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
  leaderType: String
  churchId: String!
}

input CreateMemberInputBySub {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
}
input assignLeaderInput {
  memberId: String!
  password: String
  types: String
}

input LoginInput {
  password: String!
  phoneNumber: String!
}

type RegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}
input RegistrationArrayInput {
  memberId: String!
  createInput: CreateRegistrationInput!
}

type LeaderRegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}

input updateMemberInput {
  name: String
  email: String
  phoneNumber: String
  day: String
  location: String
  pwood: String
}
input updateMemberFamilyInfoInput {
  spouseId: String
  dateOfBirth: String
  memberID: String
  relationship: String
  nextOfKin: String
  education: String
  childrenId: String
}
input EmergencyContactInput {
  name: String
  phoneNumber: String
  relation: String
}
input JobInfoInput {
  typeOfWork: String
  position: String
  company: String
  workExperience: String
}
input updateLeaderProfileInput {
  name: String
  email: String
  phoneNumber: String
  oldpassword: String
  password: String
  pwood: String
  location: String
}
enum MigrationStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
input SubChurchMigrationInput {
  memberId: String!
  destinationChurchId: String!
}

type MigrationRequest {
  id: String!
  locationFrom: String
  locationEnd: String
  # migratedTime: Time
  createdAt: Time
  memberID: String
  MemberName: String
  destinationChurchID: String
  statusID: String
  status: MigrationStatus
}
input RegistrationArrayInputs {
  registrationIDs: ID!
  createInput: CreateRegistrationInput!
}
input assignSubLeaderToMemberRegistrationArrayInput {
  callAgentId: String!
  day: [String!]!
}

input ChurchMinistryRoleInpt {
  role: String
  subChurchId: String
}

type Mutation {
  requestSubChurchMigration(input: SubChurchMigrationInput!): MigrationRequest!
  approveSubChurchMigration(requestId: String!): MigrationRequest!
  rejectSubChurchMigration(requestId: String!): MigrationRequest!

  createMember(input: CreateMemberInput): Member!
  createMemberbySubchurch(input: CreateMemberInput): Member!

  importMemberData(file: Upload!, ChurchID: String): [Member]
  dataMembers: String
  cleanUpPhoneNumbers: [String]

  createMemberBysubLeader(input: CreateMemberInputBySub): Member!
  updateMember(input: updateMemberInput!, memberId: String!): Member!
  updateMemberFamilyInfo(
    input: updateMemberFamilyInfoInput!
    memberId: String!
  ): FamilyInfo!
  updateMemberEmergencyContact(
    input: EmergencyContactInput!
    memberId: String!
  ): EmergencyContact

  updateMemberJobInfoInput(input: JobInfoInput!, memberId: String!): JobInfo!
  # /////

  updateMinistryRoleByLeader(
    input: ChurchMinistryRoleInpt!
    memberID: String!
    
  ): MemberChurchMinistryRole

  updateLeader(input: updateLeaderProfileInput!, memberId: String!): Member!
  updatesubChurch(
    input: updateLeaderProfileInput!
    subChurchId: String!
  ): SubChurch!
  updateCallCenter(
    input: updateLeaderProfileInput!
    callCenterId: String!
  ): CallCenter!

  createChurch(name: String!, email: String!, password: String): Church!
  deleteChurch(mainChurchId: String!): Boolean!
  deleteMember(memberId: String!): Boolean!
  deleteSubChurch(subChurchId: String!): Boolean!
  deleteAllMembersBySubChurch(subChurchId: String!): Boolean!
  deleteRegistration(registrationId: String!): Boolean!

  createSubChurch(
    subChurchName: String
    branch: Boolean!
    isLocal: Boolean
  ): Church!
  createMianChurch(subChurchName: String): Church!
  # createsubBranch(subBranchName: String): Church!

  assignLeader(input: assignLeaderInput): Member!
  addAnotherType(memberId: String!, types: String): Member!
  updateLeaderTypes(id: String, tags: [String!]!): Member
  assignMemberToLeaderbySubchurch(leaderID: String!, memberID: String!): Member
  assignLeaderMemberRegisterToAnotherLeader(
    sendToLeaderID: String!
    sendFromLeaderID: String!
  ): [Registration]!

  assignSubLeaderToMemberRegistration(
    callAgentId: String!
    day: [String!]!
  ): [RegistrationByCallAgent]!

  assignSubLeaderToMemberRegistrationArray(
    input: [assignSubLeaderToMemberRegistrationArrayInput]
  ): [RegistrationByCallAgent]!
  deleteAssignSubLeaderToMemberRegistration: Boolean!

  tempLeadercreateRegistrationArray(
    input: [CreateRegistrationInput]!
    registrationID: [String]!
  ): [Registration]!
  # updateLeaderTypes( id: String,tags: [String!]!): Member
  updateRegistrationArray(input: [RegistrationArrayInputs]!): [Registration]!

  removeLeader(memberId: String!): Member
  removeChild(childrenId: String!): Boolean!
  removeSpouse(SpouseId: String!): Boolean!

  createSubChurchesWithMainChurch(
    mainChurchId: String!
    subChurchNames: [String!]!
  ): Church!

  createRegistration(
    memberId: String!
    input: CreateRegistrationInput!
  ): Registration!
  createRegistrationArray(input: [RegistrationArrayInput]): [Registration]!

  updateRegistration(
    input: CreateRegistrationInput!
    registrationId: String!
  ): Registration!

  updateRegistrationByLeader(
    input: CreateRegistrationInput!
    registrationID: String!
    leaderID: String!
  ): Registration
  CreateCallCenterForSubChurchs(
    name: String!
    subChurchIDs: [String!]!
  ): CallCenter

  distributeRegistrationsToLeaders(
    leaderIds: [String!]!
  ): [LeaderRegistrationsDistribution]

  ReportRegistrationByLeader(
    report: ReportRegistrationInput
    registrationID: String!
    leaderID: String!
  ): Registration
  login(input: LoginLeaderInput!): Returns
  memberlogin(input: LoginLeaderInput!): Returns!

  logOut: Boolean!
}

input LoginLeaderInput {
  password: String!
  phoneNumber: String
  email: String
}






