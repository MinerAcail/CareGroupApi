scalar Time

type Member {
  id: String!
  name: String!
  email: String!
  phoneNumber: String
  location: String
  day: String!
  password: String
  types: String
  token: String
  LeaderID: String
  ReferenceIDCount: Int
  registrations: [Registration] # Define a relationship to Registration
  subChurch: SubChurch # Define a relationship to SubChurch
  subChurchID: String
  updatedAt: Time!
  createdAt: Time!
}

type Registration {
  id: String!
  lastComment: String!
  absence: Boolean!
  present: Boolean!
  createdAt: Time!
  leaderName: String
  leader: Member # Define a relationship to Member for leaderID
  leaderID: String
  member: Member # Define a relationship to Member for memberID
  memberID: String!
}

type Church {
  id: String!
  name: String!
  password: String
  email: String
  types: String
  updatedAt: Time!
  createdAt: Time!
  token: String
  subChurches: [SubChurch!]!
}

type SubChurch {
  id: String!
  name: String!
  updatedAt: Time!
  createdAt: Time!
  church: Church
  churchId: String!
  leaders: [Member] # Define a relationship to Member for leaders
  members: [Member] # Define a relationship to Member for members
}

union Returns = Church | SubChurch | Member

type WeeklyResults {
  date: DateInfo
  registrations: [Registration]
}
type DateInfo {
  month: String
  weekOfMonth: Int
}

type Query {
  GetAllMainChurch: [Church]
  GetAllsubChurchByMainChurchID(mainChurchId: String!): [SubChurch]
  GetAllMembersBySubChurchID(subChurchId: String!): [Member]
  GetAllMembersByLeader(leaderID: String!): [Member]
  GetAllRegistersByMemberID(MemberId: String!): [Registration]
  LastFourCommentsForMember(memberID: String!): [String]
  
  GetAllsubChurch: [SubChurch]
  GetCaller: [Member]

  Getmember(id: String!): Member
  membersByChurch(churchId: String!): [Member!]!
  GetsubChurchByID(id: String!): SubChurch

  GetChurchByID(id: String!): Church
  GetAllChurchByID: [Church]
  MembersBySubChurchID(subChurchId: String!): [Member!]!
  # GetMemberBysubChurchID(ChurchId: String!): [Member]

  registrationsByLeader(mleaderID: String!): [Registration]

  GetsubChurch(id: String!): SubChurch
  currentWeekRegistrations: [Registration!]!
  GetRegistrations: [WeeklyResults!]!
}

input CreateRegistrationInput {
  absence: Boolean
  lastComment: String
  present: Boolean
}

input CreateMemberInput {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
  leaderType: String
  churchId: String!
}

input CreateMemberInputBySub {
  name: String!
  email: String!
  phoneNumber: String
  day: String!
  location: String
  address: String
}
input assignLeaderInput {
  memberId: String!
  password: String
  types: String
}

input LoginInput {
  password: String!
  phoneNumber: String!
}

type RegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}
input RegistrationArrayInput {
  memberId: String!
  createInput: CreateRegistrationInput!
}

type LeaderRegistrationsDistribution {
  leaderID: String!
  registrationIDs: [String!]!
}

input updateMemberInput {
  name: String
  email: String
  phoneNumber: String
  day: String
  location: String
}
input updateLeaderProfileInput {
  name: String
  email: String
  phoneNumber: String
  oldpassword: String
  password: String
  location: String
}

type Mutation {
  createMember(input: CreateMemberInput): Member!
  createMemberBysubLeader(input: CreateMemberInputBySub): Member!
  updateMember(input: updateMemberInput!, memberId: String!): Member!
  updateLeader(input: updateLeaderProfileInput!, memberId: String!): Member!

  createChurch(name: String!, email: String!, password: String): Church!
  deleteChurch(mainChurchId: String!): Boolean!
  deleteMember(memberId: String!): Boolean!
  deleteSubChurch(subChurchId: String!): Boolean!
  deleteRegistration(registrationId: String!): Boolean!

  createSubChurch(subChurchName: String): Church!

  assignLeader(input: assignLeaderInput): Member!
  removeLeader(memberId: String!): Member

  createSubChurchesWithMainChurch(
    mainChurchId: String!
    subChurchNames: [String!]!
  ): Church!

  createRegistration(
    memberId: String!
    input: CreateRegistrationInput!
  ): Registration!
  createRegistrationArray(input: [RegistrationArrayInput]): [Registration]!

  updateRegistration(
    input: CreateRegistrationInput!
    registrationId: String!
  ): Registration!

  updateRegistrationByLeader(
    input: CreateRegistrationInput!
    registrationID: String!
    leaderID: String!
  ): Registration

  distributeRegistrationsToLeaders(
    leaderIds: [String!]!
  ): [LeaderRegistrationsDistribution]

  login(input: LoginLeaderInput!): Returns
  memberlogin(input: LoginLeaderInput!): Returns!

  logOut: Boolean!
}

input LoginLeaderInput {
  password: String!
  phoneNumber: String
  email: String
}
